{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parallel Coordinates\n * <https://en.wikipedia.org/wiki/Parallel_coordinates>\n */\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport * as matrix from 'zrender/lib/core/matrix.js';\nimport * as layoutUtil from '../../util/layout.js';\nimport * as axisHelper from '../../coord/axisHelper.js';\nimport ParallelAxis from './ParallelAxis.js';\nimport * as graphic from '../../util/graphic.js';\nimport * as numberUtil from '../../util/number.js';\nimport sliderMove from '../../component/helper/sliderMove.js';\nvar each = zrUtil.each;\nvar mathMin = Math.min;\nvar mathMax = Math.max;\nvar mathFloor = Math.floor;\nvar mathCeil = Math.ceil;\nvar round = numberUtil.round;\nvar PI = Math.PI;\n\nvar Parallel =\n/** @class */\nfunction () {\n  function Parallel(parallelModel, ecModel, api) {\n    this.type = 'parallel';\n    /**\n     * key: dimension\n     */\n\n    this._axesMap = zrUtil.createHashMap();\n    /**\n     * key: dimension\n     * value: {position: [], rotation, }\n     */\n\n    this._axesLayout = {};\n    this.dimensions = parallelModel.dimensions;\n    this._model = parallelModel;\n\n    this._init(parallelModel, ecModel, api);\n  }\n\n  Parallel.prototype._init = function (parallelModel, ecModel, api) {\n    var dimensions = parallelModel.dimensions;\n    var parallelAxisIndex = parallelModel.parallelAxisIndex;\n    each(dimensions, function (dim, idx) {\n      var axisIndex = parallelAxisIndex[idx];\n      var axisModel = ecModel.getComponent('parallelAxis', axisIndex);\n\n      var axis = this._axesMap.set(dim, new ParallelAxis(dim, axisHelper.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisIndex));\n\n      var isCategory = axis.type === 'category';\n      axis.onBand = isCategory && axisModel.get('boundaryGap');\n      axis.inverse = axisModel.get('inverse'); // Injection\n\n      axisModel.axis = axis;\n      axis.model = axisModel;\n      axis.coordinateSystem = axisModel.coordinateSystem = this;\n    }, this);\n  };\n  /**\n   * Update axis scale after data processed\n   */\n\n\n  Parallel.prototype.update = function (ecModel, api) {\n    this._updateAxesFromSeries(this._model, ecModel);\n  };\n\n  Parallel.prototype.containPoint = function (point) {\n    var layoutInfo = this._makeLayoutInfo();\n\n    var axisBase = layoutInfo.axisBase;\n    var layoutBase = layoutInfo.layoutBase;\n    var pixelDimIndex = layoutInfo.pixelDimIndex;\n    var pAxis = point[1 - pixelDimIndex];\n    var pLayout = point[pixelDimIndex];\n    return pAxis >= axisBase && pAxis <= axisBase + layoutInfo.axisLength && pLayout >= layoutBase && pLayout <= layoutBase + layoutInfo.layoutLength;\n  };\n\n  Parallel.prototype.getModel = function () {\n    return this._model;\n  };\n  /**\n   * Update properties from series\n   */\n\n\n  Parallel.prototype._updateAxesFromSeries = function (parallelModel, ecModel) {\n    ecModel.eachSeries(function (seriesModel) {\n      if (!parallelModel.contains(seriesModel, ecModel)) {\n        return;\n      }\n\n      var data = seriesModel.getData();\n      each(this.dimensions, function (dim) {\n        var axis = this._axesMap.get(dim);\n\n        axis.scale.unionExtentFromData(data, data.mapDimension(dim));\n        axisHelper.niceScaleExtent(axis.scale, axis.model);\n      }, this);\n    }, this);\n  };\n  /**\n   * Resize the parallel coordinate system.\n   */\n\n\n  Parallel.prototype.resize = function (parallelModel, api) {\n    this._rect = layoutUtil.getLayoutRect(parallelModel.getBoxLayoutParams(), {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n\n    this._layoutAxes();\n  };\n\n  Parallel.prototype.getRect = function () {\n    return this._rect;\n  };\n\n  Parallel.prototype._makeLayoutInfo = function () {\n    var parallelModel = this._model;\n    var rect = this._rect;\n    var xy = ['x', 'y'];\n    var wh = ['width', 'height'];\n    var layout = parallelModel.get('layout');\n    var pixelDimIndex = layout === 'horizontal' ? 0 : 1;\n    var layoutLength = rect[wh[pixelDimIndex]];\n    var layoutExtent = [0, layoutLength];\n    var axisCount = this.dimensions.length;\n    var axisExpandWidth = restrict(parallelModel.get('axisExpandWidth'), layoutExtent);\n    var axisExpandCount = restrict(parallelModel.get('axisExpandCount') || 0, [0, axisCount]);\n    var axisExpandable = parallelModel.get('axisExpandable') && axisCount > 3 && axisCount > axisExpandCount && axisExpandCount > 1 && axisExpandWidth > 0 && layoutLength > 0; // `axisExpandWindow` is According to the coordinates of [0, axisExpandLength],\n    // for sake of consider the case that axisCollapseWidth is 0 (when screen is narrow),\n    // where collapsed axes should be overlapped.\n\n    var axisExpandWindow = parallelModel.get('axisExpandWindow');\n    var winSize;\n\n    if (!axisExpandWindow) {\n      winSize = restrict(axisExpandWidth * (axisExpandCount - 1), layoutExtent);\n      var axisExpandCenter = parallelModel.get('axisExpandCenter') || mathFloor(axisCount / 2);\n      axisExpandWindow = [axisExpandWidth * axisExpandCenter - winSize / 2];\n      axisExpandWindow[1] = axisExpandWindow[0] + winSize;\n    } else {\n      winSize = restrict(axisExpandWindow[1] - axisExpandWindow[0], layoutExtent);\n      axisExpandWindow[1] = axisExpandWindow[0] + winSize;\n    }\n\n    var axisCollapseWidth = (layoutLength - winSize) / (axisCount - axisExpandCount); // Avoid axisCollapseWidth is too small.\n\n    axisCollapseWidth < 3 && (axisCollapseWidth = 0); // Find the first and last indices > ewin[0] and < ewin[1].\n\n    var winInnerIndices = [mathFloor(round(axisExpandWindow[0] / axisExpandWidth, 1)) + 1, mathCeil(round(axisExpandWindow[1] / axisExpandWidth, 1)) - 1]; // Pos in ec coordinates.\n\n    var axisExpandWindow0Pos = axisCollapseWidth / axisExpandWidth * axisExpandWindow[0];\n    return {\n      layout: layout,\n      pixelDimIndex: pixelDimIndex,\n      layoutBase: rect[xy[pixelDimIndex]],\n      layoutLength: layoutLength,\n      axisBase: rect[xy[1 - pixelDimIndex]],\n      axisLength: rect[wh[1 - pixelDimIndex]],\n      axisExpandable: axisExpandable,\n      axisExpandWidth: axisExpandWidth,\n      axisCollapseWidth: axisCollapseWidth,\n      axisExpandWindow: axisExpandWindow,\n      axisCount: axisCount,\n      winInnerIndices: winInnerIndices,\n      axisExpandWindow0Pos: axisExpandWindow0Pos\n    };\n  };\n\n  Parallel.prototype._layoutAxes = function () {\n    var rect = this._rect;\n    var axes = this._axesMap;\n    var dimensions = this.dimensions;\n\n    var layoutInfo = this._makeLayoutInfo();\n\n    var layout = layoutInfo.layout;\n    axes.each(function (axis) {\n      var axisExtent = [0, layoutInfo.axisLength];\n      var idx = axis.inverse ? 1 : 0;\n      axis.setExtent(axisExtent[idx], axisExtent[1 - idx]);\n    });\n    each(dimensions, function (dim, idx) {\n      var posInfo = (layoutInfo.axisExpandable ? layoutAxisWithExpand : layoutAxisWithoutExpand)(idx, layoutInfo);\n      var positionTable = {\n        horizontal: {\n          x: posInfo.position,\n          y: layoutInfo.axisLength\n        },\n        vertical: {\n          x: 0,\n          y: posInfo.position\n        }\n      };\n      var rotationTable = {\n        horizontal: PI / 2,\n        vertical: 0\n      };\n      var position = [positionTable[layout].x + rect.x, positionTable[layout].y + rect.y];\n      var rotation = rotationTable[layout];\n      var transform = matrix.create();\n      matrix.rotate(transform, transform, rotation);\n      matrix.translate(transform, transform, position); // TODO\n      // tick layout info\n      // TODO\n      // update dimensions info based on axis order.\n\n      this._axesLayout[dim] = {\n        position: position,\n        rotation: rotation,\n        transform: transform,\n        axisNameAvailableWidth: posInfo.axisNameAvailableWidth,\n        axisLabelShow: posInfo.axisLabelShow,\n        nameTruncateMaxWidth: posInfo.nameTruncateMaxWidth,\n        tickDirection: 1,\n        labelDirection: 1\n      };\n    }, this);\n  };\n  /**\n   * Get axis by dim.\n   */\n\n\n  Parallel.prototype.getAxis = function (dim) {\n    return this._axesMap.get(dim);\n  };\n  /**\n   * Convert a dim value of a single item of series data to Point.\n   */\n\n\n  Parallel.prototype.dataToPoint = function (value, dim) {\n    return this.axisCoordToPoint(this._axesMap.get(dim).dataToCoord(value), dim);\n  };\n  /**\n   * Travel data for one time, get activeState of each data item.\n   * @param start the start dataIndex that travel from.\n   * @param end the next dataIndex of the last dataIndex will be travel.\n   */\n\n\n  Parallel.prototype.eachActiveState = function (data, callback, start, end) {\n    start == null && (start = 0);\n    end == null && (end = data.count());\n    var axesMap = this._axesMap;\n    var dimensions = this.dimensions;\n    var dataDimensions = [];\n    var axisModels = [];\n    zrUtil.each(dimensions, function (axisDim) {\n      dataDimensions.push(data.mapDimension(axisDim));\n      axisModels.push(axesMap.get(axisDim).model);\n    });\n    var hasActiveSet = this.hasAxisBrushed();\n\n    for (var dataIndex = start; dataIndex < end; dataIndex++) {\n      var activeState = void 0;\n\n      if (!hasActiveSet) {\n        activeState = 'normal';\n      } else {\n        activeState = 'active';\n        var values = data.getValues(dataDimensions, dataIndex);\n\n        for (var j = 0, lenj = dimensions.length; j < lenj; j++) {\n          var state = axisModels[j].getActiveState(values[j]);\n\n          if (state === 'inactive') {\n            activeState = 'inactive';\n            break;\n          }\n        }\n      }\n\n      callback(activeState, dataIndex);\n    }\n  };\n  /**\n   * Whether has any activeSet.\n   */\n\n\n  Parallel.prototype.hasAxisBrushed = function () {\n    var dimensions = this.dimensions;\n    var axesMap = this._axesMap;\n    var hasActiveSet = false;\n\n    for (var j = 0, lenj = dimensions.length; j < lenj; j++) {\n      if (axesMap.get(dimensions[j]).model.getActiveState() !== 'normal') {\n        hasActiveSet = true;\n      }\n    }\n\n    return hasActiveSet;\n  };\n  /**\n   * Convert coords of each axis to Point.\n   *  Return point. For example: [10, 20]\n   */\n\n\n  Parallel.prototype.axisCoordToPoint = function (coord, dim) {\n    var axisLayout = this._axesLayout[dim];\n    return graphic.applyTransform([coord, 0], axisLayout.transform);\n  };\n  /**\n   * Get axis layout.\n   */\n\n\n  Parallel.prototype.getAxisLayout = function (dim) {\n    return zrUtil.clone(this._axesLayout[dim]);\n  };\n  /**\n   * @return {Object} {axisExpandWindow, delta, behavior: 'jump' | 'slide' | 'none'}.\n   */\n\n\n  Parallel.prototype.getSlidedAxisExpandWindow = function (point) {\n    var layoutInfo = this._makeLayoutInfo();\n\n    var pixelDimIndex = layoutInfo.pixelDimIndex;\n    var axisExpandWindow = layoutInfo.axisExpandWindow.slice();\n    var winSize = axisExpandWindow[1] - axisExpandWindow[0];\n    var extent = [0, layoutInfo.axisExpandWidth * (layoutInfo.axisCount - 1)]; // Out of the area of coordinate system.\n\n    if (!this.containPoint(point)) {\n      return {\n        behavior: 'none',\n        axisExpandWindow: axisExpandWindow\n      };\n    } // Conver the point from global to expand coordinates.\n\n\n    var pointCoord = point[pixelDimIndex] - layoutInfo.layoutBase - layoutInfo.axisExpandWindow0Pos; // For dragging operation convenience, the window should not be\n    // slided when mouse is the center area of the window.\n\n    var delta;\n    var behavior = 'slide';\n    var axisCollapseWidth = layoutInfo.axisCollapseWidth;\n\n    var triggerArea = this._model.get('axisExpandSlideTriggerArea'); // But consider touch device, jump is necessary.\n\n\n    var useJump = triggerArea[0] != null;\n\n    if (axisCollapseWidth) {\n      if (useJump && axisCollapseWidth && pointCoord < winSize * triggerArea[0]) {\n        behavior = 'jump';\n        delta = pointCoord - winSize * triggerArea[2];\n      } else if (useJump && axisCollapseWidth && pointCoord > winSize * (1 - triggerArea[0])) {\n        behavior = 'jump';\n        delta = pointCoord - winSize * (1 - triggerArea[2]);\n      } else {\n        (delta = pointCoord - winSize * triggerArea[1]) >= 0 && (delta = pointCoord - winSize * (1 - triggerArea[1])) <= 0 && (delta = 0);\n      }\n\n      delta *= layoutInfo.axisExpandWidth / axisCollapseWidth;\n      delta ? sliderMove(delta, axisExpandWindow, extent, 'all') // Avoid nonsense triger on mousemove.\n      : behavior = 'none';\n    } // When screen is too narrow, make it visible and slidable, although it is hard to interact.\n    else {\n      var winSize2 = axisExpandWindow[1] - axisExpandWindow[0];\n      var pos = extent[1] * pointCoord / winSize2;\n      axisExpandWindow = [mathMax(0, pos - winSize2 / 2)];\n      axisExpandWindow[1] = mathMin(extent[1], axisExpandWindow[0] + winSize2);\n      axisExpandWindow[0] = axisExpandWindow[1] - winSize2;\n    }\n\n    return {\n      axisExpandWindow: axisExpandWindow,\n      behavior: behavior\n    };\n  };\n\n  return Parallel;\n}();\n\nfunction restrict(len, extent) {\n  return mathMin(mathMax(len, extent[0]), extent[1]);\n}\n\nfunction layoutAxisWithoutExpand(axisIndex, layoutInfo) {\n  var step = layoutInfo.layoutLength / (layoutInfo.axisCount - 1);\n  return {\n    position: step * axisIndex,\n    axisNameAvailableWidth: step,\n    axisLabelShow: true\n  };\n}\n\nfunction layoutAxisWithExpand(axisIndex, layoutInfo) {\n  var layoutLength = layoutInfo.layoutLength;\n  var axisExpandWidth = layoutInfo.axisExpandWidth;\n  var axisCount = layoutInfo.axisCount;\n  var axisCollapseWidth = layoutInfo.axisCollapseWidth;\n  var winInnerIndices = layoutInfo.winInnerIndices;\n  var position;\n  var axisNameAvailableWidth = axisCollapseWidth;\n  var axisLabelShow = false;\n  var nameTruncateMaxWidth;\n\n  if (axisIndex < winInnerIndices[0]) {\n    position = axisIndex * axisCollapseWidth;\n    nameTruncateMaxWidth = axisCollapseWidth;\n  } else if (axisIndex <= winInnerIndices[1]) {\n    position = layoutInfo.axisExpandWindow0Pos + axisIndex * axisExpandWidth - layoutInfo.axisExpandWindow[0];\n    axisNameAvailableWidth = axisExpandWidth;\n    axisLabelShow = true;\n  } else {\n    position = layoutLength - (axisCount - 1 - axisIndex) * axisCollapseWidth;\n    nameTruncateMaxWidth = axisCollapseWidth;\n  }\n\n  return {\n    position: position,\n    axisNameAvailableWidth: axisNameAvailableWidth,\n    axisLabelShow: axisLabelShow,\n    nameTruncateMaxWidth: nameTruncateMaxWidth\n  };\n}\n\nexport default Parallel;","map":{"version":3,"names":["zrUtil","matrix","layoutUtil","axisHelper","ParallelAxis","graphic","numberUtil","sliderMove","each","mathMin","Math","min","mathMax","max","mathFloor","floor","mathCeil","ceil","round","PI","Parallel","parallelModel","ecModel","api","type","_axesMap","createHashMap","_axesLayout","dimensions","_model","_init","prototype","parallelAxisIndex","dim","idx","axisIndex","axisModel","getComponent","axis","set","createScaleByModel","get","isCategory","onBand","inverse","model","coordinateSystem","update","_updateAxesFromSeries","containPoint","point","layoutInfo","_makeLayoutInfo","axisBase","layoutBase","pixelDimIndex","pAxis","pLayout","axisLength","layoutLength","getModel","eachSeries","seriesModel","contains","data","getData","scale","unionExtentFromData","mapDimension","niceScaleExtent","resize","_rect","getLayoutRect","getBoxLayoutParams","width","getWidth","height","getHeight","_layoutAxes","getRect","rect","xy","wh","layout","layoutExtent","axisCount","length","axisExpandWidth","restrict","axisExpandCount","axisExpandable","axisExpandWindow","winSize","axisExpandCenter","axisCollapseWidth","winInnerIndices","axisExpandWindow0Pos","axes","axisExtent","setExtent","posInfo","layoutAxisWithExpand","layoutAxisWithoutExpand","positionTable","horizontal","x","position","y","vertical","rotationTable","rotation","transform","create","rotate","translate","axisNameAvailableWidth","axisLabelShow","nameTruncateMaxWidth","tickDirection","labelDirection","getAxis","dataToPoint","value","axisCoordToPoint","dataToCoord","eachActiveState","callback","start","end","count","axesMap","dataDimensions","axisModels","axisDim","push","hasActiveSet","hasAxisBrushed","dataIndex","activeState","values","getValues","j","lenj","state","getActiveState","coord","axisLayout","applyTransform","getAxisLayout","clone","getSlidedAxisExpandWindow","slice","extent","behavior","pointCoord","delta","triggerArea","useJump","winSize2","pos","len","step"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/coord/parallel/Parallel.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parallel Coordinates\n * <https://en.wikipedia.org/wiki/Parallel_coordinates>\n */\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport * as matrix from 'zrender/lib/core/matrix.js';\nimport * as layoutUtil from '../../util/layout.js';\nimport * as axisHelper from '../../coord/axisHelper.js';\nimport ParallelAxis from './ParallelAxis.js';\nimport * as graphic from '../../util/graphic.js';\nimport * as numberUtil from '../../util/number.js';\nimport sliderMove from '../../component/helper/sliderMove.js';\nvar each = zrUtil.each;\nvar mathMin = Math.min;\nvar mathMax = Math.max;\nvar mathFloor = Math.floor;\nvar mathCeil = Math.ceil;\nvar round = numberUtil.round;\nvar PI = Math.PI;\n\nvar Parallel =\n/** @class */\nfunction () {\n  function Parallel(parallelModel, ecModel, api) {\n    this.type = 'parallel';\n    /**\n     * key: dimension\n     */\n\n    this._axesMap = zrUtil.createHashMap();\n    /**\n     * key: dimension\n     * value: {position: [], rotation, }\n     */\n\n    this._axesLayout = {};\n    this.dimensions = parallelModel.dimensions;\n    this._model = parallelModel;\n\n    this._init(parallelModel, ecModel, api);\n  }\n\n  Parallel.prototype._init = function (parallelModel, ecModel, api) {\n    var dimensions = parallelModel.dimensions;\n    var parallelAxisIndex = parallelModel.parallelAxisIndex;\n    each(dimensions, function (dim, idx) {\n      var axisIndex = parallelAxisIndex[idx];\n      var axisModel = ecModel.getComponent('parallelAxis', axisIndex);\n\n      var axis = this._axesMap.set(dim, new ParallelAxis(dim, axisHelper.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisIndex));\n\n      var isCategory = axis.type === 'category';\n      axis.onBand = isCategory && axisModel.get('boundaryGap');\n      axis.inverse = axisModel.get('inverse'); // Injection\n\n      axisModel.axis = axis;\n      axis.model = axisModel;\n      axis.coordinateSystem = axisModel.coordinateSystem = this;\n    }, this);\n  };\n  /**\n   * Update axis scale after data processed\n   */\n\n\n  Parallel.prototype.update = function (ecModel, api) {\n    this._updateAxesFromSeries(this._model, ecModel);\n  };\n\n  Parallel.prototype.containPoint = function (point) {\n    var layoutInfo = this._makeLayoutInfo();\n\n    var axisBase = layoutInfo.axisBase;\n    var layoutBase = layoutInfo.layoutBase;\n    var pixelDimIndex = layoutInfo.pixelDimIndex;\n    var pAxis = point[1 - pixelDimIndex];\n    var pLayout = point[pixelDimIndex];\n    return pAxis >= axisBase && pAxis <= axisBase + layoutInfo.axisLength && pLayout >= layoutBase && pLayout <= layoutBase + layoutInfo.layoutLength;\n  };\n\n  Parallel.prototype.getModel = function () {\n    return this._model;\n  };\n  /**\n   * Update properties from series\n   */\n\n\n  Parallel.prototype._updateAxesFromSeries = function (parallelModel, ecModel) {\n    ecModel.eachSeries(function (seriesModel) {\n      if (!parallelModel.contains(seriesModel, ecModel)) {\n        return;\n      }\n\n      var data = seriesModel.getData();\n      each(this.dimensions, function (dim) {\n        var axis = this._axesMap.get(dim);\n\n        axis.scale.unionExtentFromData(data, data.mapDimension(dim));\n        axisHelper.niceScaleExtent(axis.scale, axis.model);\n      }, this);\n    }, this);\n  };\n  /**\n   * Resize the parallel coordinate system.\n   */\n\n\n  Parallel.prototype.resize = function (parallelModel, api) {\n    this._rect = layoutUtil.getLayoutRect(parallelModel.getBoxLayoutParams(), {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n\n    this._layoutAxes();\n  };\n\n  Parallel.prototype.getRect = function () {\n    return this._rect;\n  };\n\n  Parallel.prototype._makeLayoutInfo = function () {\n    var parallelModel = this._model;\n    var rect = this._rect;\n    var xy = ['x', 'y'];\n    var wh = ['width', 'height'];\n    var layout = parallelModel.get('layout');\n    var pixelDimIndex = layout === 'horizontal' ? 0 : 1;\n    var layoutLength = rect[wh[pixelDimIndex]];\n    var layoutExtent = [0, layoutLength];\n    var axisCount = this.dimensions.length;\n    var axisExpandWidth = restrict(parallelModel.get('axisExpandWidth'), layoutExtent);\n    var axisExpandCount = restrict(parallelModel.get('axisExpandCount') || 0, [0, axisCount]);\n    var axisExpandable = parallelModel.get('axisExpandable') && axisCount > 3 && axisCount > axisExpandCount && axisExpandCount > 1 && axisExpandWidth > 0 && layoutLength > 0; // `axisExpandWindow` is According to the coordinates of [0, axisExpandLength],\n    // for sake of consider the case that axisCollapseWidth is 0 (when screen is narrow),\n    // where collapsed axes should be overlapped.\n\n    var axisExpandWindow = parallelModel.get('axisExpandWindow');\n    var winSize;\n\n    if (!axisExpandWindow) {\n      winSize = restrict(axisExpandWidth * (axisExpandCount - 1), layoutExtent);\n      var axisExpandCenter = parallelModel.get('axisExpandCenter') || mathFloor(axisCount / 2);\n      axisExpandWindow = [axisExpandWidth * axisExpandCenter - winSize / 2];\n      axisExpandWindow[1] = axisExpandWindow[0] + winSize;\n    } else {\n      winSize = restrict(axisExpandWindow[1] - axisExpandWindow[0], layoutExtent);\n      axisExpandWindow[1] = axisExpandWindow[0] + winSize;\n    }\n\n    var axisCollapseWidth = (layoutLength - winSize) / (axisCount - axisExpandCount); // Avoid axisCollapseWidth is too small.\n\n    axisCollapseWidth < 3 && (axisCollapseWidth = 0); // Find the first and last indices > ewin[0] and < ewin[1].\n\n    var winInnerIndices = [mathFloor(round(axisExpandWindow[0] / axisExpandWidth, 1)) + 1, mathCeil(round(axisExpandWindow[1] / axisExpandWidth, 1)) - 1]; // Pos in ec coordinates.\n\n    var axisExpandWindow0Pos = axisCollapseWidth / axisExpandWidth * axisExpandWindow[0];\n    return {\n      layout: layout,\n      pixelDimIndex: pixelDimIndex,\n      layoutBase: rect[xy[pixelDimIndex]],\n      layoutLength: layoutLength,\n      axisBase: rect[xy[1 - pixelDimIndex]],\n      axisLength: rect[wh[1 - pixelDimIndex]],\n      axisExpandable: axisExpandable,\n      axisExpandWidth: axisExpandWidth,\n      axisCollapseWidth: axisCollapseWidth,\n      axisExpandWindow: axisExpandWindow,\n      axisCount: axisCount,\n      winInnerIndices: winInnerIndices,\n      axisExpandWindow0Pos: axisExpandWindow0Pos\n    };\n  };\n\n  Parallel.prototype._layoutAxes = function () {\n    var rect = this._rect;\n    var axes = this._axesMap;\n    var dimensions = this.dimensions;\n\n    var layoutInfo = this._makeLayoutInfo();\n\n    var layout = layoutInfo.layout;\n    axes.each(function (axis) {\n      var axisExtent = [0, layoutInfo.axisLength];\n      var idx = axis.inverse ? 1 : 0;\n      axis.setExtent(axisExtent[idx], axisExtent[1 - idx]);\n    });\n    each(dimensions, function (dim, idx) {\n      var posInfo = (layoutInfo.axisExpandable ? layoutAxisWithExpand : layoutAxisWithoutExpand)(idx, layoutInfo);\n      var positionTable = {\n        horizontal: {\n          x: posInfo.position,\n          y: layoutInfo.axisLength\n        },\n        vertical: {\n          x: 0,\n          y: posInfo.position\n        }\n      };\n      var rotationTable = {\n        horizontal: PI / 2,\n        vertical: 0\n      };\n      var position = [positionTable[layout].x + rect.x, positionTable[layout].y + rect.y];\n      var rotation = rotationTable[layout];\n      var transform = matrix.create();\n      matrix.rotate(transform, transform, rotation);\n      matrix.translate(transform, transform, position); // TODO\n      // tick layout info\n      // TODO\n      // update dimensions info based on axis order.\n\n      this._axesLayout[dim] = {\n        position: position,\n        rotation: rotation,\n        transform: transform,\n        axisNameAvailableWidth: posInfo.axisNameAvailableWidth,\n        axisLabelShow: posInfo.axisLabelShow,\n        nameTruncateMaxWidth: posInfo.nameTruncateMaxWidth,\n        tickDirection: 1,\n        labelDirection: 1\n      };\n    }, this);\n  };\n  /**\n   * Get axis by dim.\n   */\n\n\n  Parallel.prototype.getAxis = function (dim) {\n    return this._axesMap.get(dim);\n  };\n  /**\n   * Convert a dim value of a single item of series data to Point.\n   */\n\n\n  Parallel.prototype.dataToPoint = function (value, dim) {\n    return this.axisCoordToPoint(this._axesMap.get(dim).dataToCoord(value), dim);\n  };\n  /**\n   * Travel data for one time, get activeState of each data item.\n   * @param start the start dataIndex that travel from.\n   * @param end the next dataIndex of the last dataIndex will be travel.\n   */\n\n\n  Parallel.prototype.eachActiveState = function (data, callback, start, end) {\n    start == null && (start = 0);\n    end == null && (end = data.count());\n    var axesMap = this._axesMap;\n    var dimensions = this.dimensions;\n    var dataDimensions = [];\n    var axisModels = [];\n    zrUtil.each(dimensions, function (axisDim) {\n      dataDimensions.push(data.mapDimension(axisDim));\n      axisModels.push(axesMap.get(axisDim).model);\n    });\n    var hasActiveSet = this.hasAxisBrushed();\n\n    for (var dataIndex = start; dataIndex < end; dataIndex++) {\n      var activeState = void 0;\n\n      if (!hasActiveSet) {\n        activeState = 'normal';\n      } else {\n        activeState = 'active';\n        var values = data.getValues(dataDimensions, dataIndex);\n\n        for (var j = 0, lenj = dimensions.length; j < lenj; j++) {\n          var state = axisModels[j].getActiveState(values[j]);\n\n          if (state === 'inactive') {\n            activeState = 'inactive';\n            break;\n          }\n        }\n      }\n\n      callback(activeState, dataIndex);\n    }\n  };\n  /**\n   * Whether has any activeSet.\n   */\n\n\n  Parallel.prototype.hasAxisBrushed = function () {\n    var dimensions = this.dimensions;\n    var axesMap = this._axesMap;\n    var hasActiveSet = false;\n\n    for (var j = 0, lenj = dimensions.length; j < lenj; j++) {\n      if (axesMap.get(dimensions[j]).model.getActiveState() !== 'normal') {\n        hasActiveSet = true;\n      }\n    }\n\n    return hasActiveSet;\n  };\n  /**\n   * Convert coords of each axis to Point.\n   *  Return point. For example: [10, 20]\n   */\n\n\n  Parallel.prototype.axisCoordToPoint = function (coord, dim) {\n    var axisLayout = this._axesLayout[dim];\n    return graphic.applyTransform([coord, 0], axisLayout.transform);\n  };\n  /**\n   * Get axis layout.\n   */\n\n\n  Parallel.prototype.getAxisLayout = function (dim) {\n    return zrUtil.clone(this._axesLayout[dim]);\n  };\n  /**\n   * @return {Object} {axisExpandWindow, delta, behavior: 'jump' | 'slide' | 'none'}.\n   */\n\n\n  Parallel.prototype.getSlidedAxisExpandWindow = function (point) {\n    var layoutInfo = this._makeLayoutInfo();\n\n    var pixelDimIndex = layoutInfo.pixelDimIndex;\n    var axisExpandWindow = layoutInfo.axisExpandWindow.slice();\n    var winSize = axisExpandWindow[1] - axisExpandWindow[0];\n    var extent = [0, layoutInfo.axisExpandWidth * (layoutInfo.axisCount - 1)]; // Out of the area of coordinate system.\n\n    if (!this.containPoint(point)) {\n      return {\n        behavior: 'none',\n        axisExpandWindow: axisExpandWindow\n      };\n    } // Conver the point from global to expand coordinates.\n\n\n    var pointCoord = point[pixelDimIndex] - layoutInfo.layoutBase - layoutInfo.axisExpandWindow0Pos; // For dragging operation convenience, the window should not be\n    // slided when mouse is the center area of the window.\n\n    var delta;\n    var behavior = 'slide';\n    var axisCollapseWidth = layoutInfo.axisCollapseWidth;\n\n    var triggerArea = this._model.get('axisExpandSlideTriggerArea'); // But consider touch device, jump is necessary.\n\n\n    var useJump = triggerArea[0] != null;\n\n    if (axisCollapseWidth) {\n      if (useJump && axisCollapseWidth && pointCoord < winSize * triggerArea[0]) {\n        behavior = 'jump';\n        delta = pointCoord - winSize * triggerArea[2];\n      } else if (useJump && axisCollapseWidth && pointCoord > winSize * (1 - triggerArea[0])) {\n        behavior = 'jump';\n        delta = pointCoord - winSize * (1 - triggerArea[2]);\n      } else {\n        (delta = pointCoord - winSize * triggerArea[1]) >= 0 && (delta = pointCoord - winSize * (1 - triggerArea[1])) <= 0 && (delta = 0);\n      }\n\n      delta *= layoutInfo.axisExpandWidth / axisCollapseWidth;\n      delta ? sliderMove(delta, axisExpandWindow, extent, 'all') // Avoid nonsense triger on mousemove.\n      : behavior = 'none';\n    } // When screen is too narrow, make it visible and slidable, although it is hard to interact.\n    else {\n        var winSize2 = axisExpandWindow[1] - axisExpandWindow[0];\n        var pos = extent[1] * pointCoord / winSize2;\n        axisExpandWindow = [mathMax(0, pos - winSize2 / 2)];\n        axisExpandWindow[1] = mathMin(extent[1], axisExpandWindow[0] + winSize2);\n        axisExpandWindow[0] = axisExpandWindow[1] - winSize2;\n      }\n\n    return {\n      axisExpandWindow: axisExpandWindow,\n      behavior: behavior\n    };\n  };\n\n  return Parallel;\n}();\n\nfunction restrict(len, extent) {\n  return mathMin(mathMax(len, extent[0]), extent[1]);\n}\n\nfunction layoutAxisWithoutExpand(axisIndex, layoutInfo) {\n  var step = layoutInfo.layoutLength / (layoutInfo.axisCount - 1);\n  return {\n    position: step * axisIndex,\n    axisNameAvailableWidth: step,\n    axisLabelShow: true\n  };\n}\n\nfunction layoutAxisWithExpand(axisIndex, layoutInfo) {\n  var layoutLength = layoutInfo.layoutLength;\n  var axisExpandWidth = layoutInfo.axisExpandWidth;\n  var axisCount = layoutInfo.axisCount;\n  var axisCollapseWidth = layoutInfo.axisCollapseWidth;\n  var winInnerIndices = layoutInfo.winInnerIndices;\n  var position;\n  var axisNameAvailableWidth = axisCollapseWidth;\n  var axisLabelShow = false;\n  var nameTruncateMaxWidth;\n\n  if (axisIndex < winInnerIndices[0]) {\n    position = axisIndex * axisCollapseWidth;\n    nameTruncateMaxWidth = axisCollapseWidth;\n  } else if (axisIndex <= winInnerIndices[1]) {\n    position = layoutInfo.axisExpandWindow0Pos + axisIndex * axisExpandWidth - layoutInfo.axisExpandWindow[0];\n    axisNameAvailableWidth = axisExpandWidth;\n    axisLabelShow = true;\n  } else {\n    position = layoutLength - (axisCount - 1 - axisIndex) * axisCollapseWidth;\n    nameTruncateMaxWidth = axisCollapseWidth;\n  }\n\n  return {\n    position: position,\n    axisNameAvailableWidth: axisNameAvailableWidth,\n    axisLabelShow: axisLabelShow,\n    nameTruncateMaxWidth: nameTruncateMaxWidth\n  };\n}\n\nexport default Parallel;"],"mappings":"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"},"metadata":{},"sourceType":"module"}