{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// @ts-nocheck\nimport * as zrUtil from 'zrender/lib/core/util.js';\nvar KEY_DELIMITER = '-->';\n/**\n * params handler\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @returns {*}\n */\n\nvar getAutoCurvenessParams = function (seriesModel) {\n  return seriesModel.get('autoCurveness') || null;\n};\n/**\n * Generate a list of edge curvatures, 20 is the default\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param {number} appendLength\n * @return  20 => [0, -0.2, 0.2, -0.4, 0.4, -0.6, 0.6, -0.8, 0.8, -1, 1, -1.2, 1.2, -1.4, 1.4, -1.6, 1.6, -1.8, 1.8, -2]\n */\n\n\nvar createCurveness = function (seriesModel, appendLength) {\n  var autoCurvenessParmas = getAutoCurvenessParams(seriesModel);\n  var length = 20;\n  var curvenessList = []; // handler the function set\n\n  if (zrUtil.isNumber(autoCurvenessParmas)) {\n    length = autoCurvenessParmas;\n  } else if (zrUtil.isArray(autoCurvenessParmas)) {\n    seriesModel.__curvenessList = autoCurvenessParmas;\n    return;\n  } // append length\n\n\n  if (appendLength > length) {\n    length = appendLength;\n  } // make sure the length is even\n\n\n  var len = length % 2 ? length + 2 : length + 3;\n  curvenessList = [];\n\n  for (var i = 0; i < len; i++) {\n    curvenessList.push((i % 2 ? i + 1 : i) / 10 * (i % 2 ? -1 : 1));\n  }\n\n  seriesModel.__curvenessList = curvenessList;\n};\n/**\n * Create different cache key data in the positive and negative directions, in order to set the curvature later\n * @param {number|string|module:echarts/data/Graph.Node} n1\n * @param {number|string|module:echarts/data/Graph.Node} n2\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @returns {string} key\n */\n\n\nvar getKeyOfEdges = function (n1, n2, seriesModel) {\n  var source = [n1.id, n1.dataIndex].join('.');\n  var target = [n2.id, n2.dataIndex].join('.');\n  return [seriesModel.uid, source, target].join(KEY_DELIMITER);\n};\n/**\n * get opposite key\n * @param {string} key\n * @returns {string}\n */\n\n\nvar getOppositeKey = function (key) {\n  var keys = key.split(KEY_DELIMITER);\n  return [keys[0], keys[2], keys[1]].join(KEY_DELIMITER);\n};\n/**\n * get edgeMap with key\n * @param edge\n * @param {module:echarts/model/SeriesModel} seriesModel\n */\n\n\nvar getEdgeFromMap = function (edge, seriesModel) {\n  var key = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  return seriesModel.__edgeMap[key];\n};\n/**\n * calculate all cases total length\n * @param edge\n * @param seriesModel\n * @returns {number}\n */\n\n\nvar getTotalLengthBetweenNodes = function (edge, seriesModel) {\n  var len = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node1, edge.node2, seriesModel), seriesModel);\n  var lenV = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node2, edge.node1, seriesModel), seriesModel);\n  return len + lenV;\n};\n/**\n *\n * @param key\n */\n\n\nvar getEdgeMapLengthWithKey = function (key, seriesModel) {\n  var edgeMap = seriesModel.__edgeMap;\n  return edgeMap[key] ? edgeMap[key].length : 0;\n};\n/**\n * Count the number of edges between the same two points, used to obtain the curvature table and the parity of the edge\n * @see /graph/GraphSeries.js@getInitialData\n * @param {module:echarts/model/SeriesModel} seriesModel\n */\n\n\nexport function initCurvenessList(seriesModel) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  seriesModel.__curvenessList = [];\n  seriesModel.__edgeMap = {}; // calc the array of curveness List\n\n  createCurveness(seriesModel);\n}\n/**\n * set edgeMap with key\n * @param {number|string|module:echarts/data/Graph.Node} n1\n * @param {number|string|module:echarts/data/Graph.Node} n2\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param {number} index\n */\n\nexport function createEdgeMapForCurveness(n1, n2, seriesModel, index) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  var key = getKeyOfEdges(n1, n2, seriesModel);\n  var edgeMap = seriesModel.__edgeMap;\n  var oppositeEdges = edgeMap[getOppositeKey(key)]; // set direction\n\n  if (edgeMap[key] && !oppositeEdges) {\n    edgeMap[key].isForward = true;\n  } else if (oppositeEdges && edgeMap[key]) {\n    oppositeEdges.isForward = true;\n    edgeMap[key].isForward = false;\n  }\n\n  edgeMap[key] = edgeMap[key] || [];\n  edgeMap[key].push(index);\n}\n/**\n * get curvature for edge\n * @param edge\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param index\n */\n\nexport function getCurvenessForEdge(edge, seriesModel, index, needReverse) {\n  var autoCurvenessParams = getAutoCurvenessParams(seriesModel);\n  var isArrayParam = zrUtil.isArray(autoCurvenessParams);\n\n  if (!autoCurvenessParams) {\n    return null;\n  }\n\n  var edgeArray = getEdgeFromMap(edge, seriesModel);\n\n  if (!edgeArray) {\n    return null;\n  }\n\n  var edgeIndex = -1;\n\n  for (var i = 0; i < edgeArray.length; i++) {\n    if (edgeArray[i] === index) {\n      edgeIndex = i;\n      break;\n    }\n  } // if totalLen is Longer createCurveness\n\n\n  var totalLen = getTotalLengthBetweenNodes(edge, seriesModel);\n  createCurveness(seriesModel, totalLen);\n  edge.lineStyle = edge.lineStyle || {}; // if is opposite edge, must set curvenss to opposite number\n\n  var curKey = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  var curvenessList = seriesModel.__curvenessList; // if pass array no need parity\n\n  var parityCorrection = isArrayParam ? 0 : totalLen % 2 ? 0 : 1;\n\n  if (!edgeArray.isForward) {\n    // the opposite edge show outside\n    var oppositeKey = getOppositeKey(curKey);\n    var len = getEdgeMapLengthWithKey(oppositeKey, seriesModel);\n    var resValue = curvenessList[edgeIndex + len + parityCorrection]; // isNeedReverse, simple, force type need reverse the curveness in the junction of the forword and the opposite\n\n    if (needReverse) {\n      // set as array may make the parity handle with the len of opposite\n      if (isArrayParam) {\n        if (autoCurvenessParams && autoCurvenessParams[0] === 0) {\n          return (len + parityCorrection) % 2 ? resValue : -resValue;\n        } else {\n          return ((len % 2 ? 0 : 1) + parityCorrection) % 2 ? resValue : -resValue;\n        }\n      } else {\n        return (len + parityCorrection) % 2 ? resValue : -resValue;\n      }\n    } else {\n      return curvenessList[edgeIndex + len + parityCorrection];\n    }\n  } else {\n    return curvenessList[parityCorrection + edgeIndex];\n  }\n}","map":{"version":3,"names":["zrUtil","KEY_DELIMITER","getAutoCurvenessParams","seriesModel","get","createCurveness","appendLength","autoCurvenessParmas","length","curvenessList","isNumber","isArray","__curvenessList","len","i","push","getKeyOfEdges","n1","n2","source","id","dataIndex","join","target","uid","getOppositeKey","key","keys","split","getEdgeFromMap","edge","node1","node2","__edgeMap","getTotalLengthBetweenNodes","getEdgeMapLengthWithKey","lenV","edgeMap","initCurvenessList","createEdgeMapForCurveness","index","oppositeEdges","isForward","getCurvenessForEdge","needReverse","autoCurvenessParams","isArrayParam","edgeArray","edgeIndex","totalLen","lineStyle","curKey","parityCorrection","oppositeKey","resValue"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/chart/helper/multipleGraphEdgeHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// @ts-nocheck\nimport * as zrUtil from 'zrender/lib/core/util.js';\nvar KEY_DELIMITER = '-->';\n/**\n * params handler\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @returns {*}\n */\n\nvar getAutoCurvenessParams = function (seriesModel) {\n  return seriesModel.get('autoCurveness') || null;\n};\n/**\n * Generate a list of edge curvatures, 20 is the default\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param {number} appendLength\n * @return  20 => [0, -0.2, 0.2, -0.4, 0.4, -0.6, 0.6, -0.8, 0.8, -1, 1, -1.2, 1.2, -1.4, 1.4, -1.6, 1.6, -1.8, 1.8, -2]\n */\n\n\nvar createCurveness = function (seriesModel, appendLength) {\n  var autoCurvenessParmas = getAutoCurvenessParams(seriesModel);\n  var length = 20;\n  var curvenessList = []; // handler the function set\n\n  if (zrUtil.isNumber(autoCurvenessParmas)) {\n    length = autoCurvenessParmas;\n  } else if (zrUtil.isArray(autoCurvenessParmas)) {\n    seriesModel.__curvenessList = autoCurvenessParmas;\n    return;\n  } // append length\n\n\n  if (appendLength > length) {\n    length = appendLength;\n  } // make sure the length is even\n\n\n  var len = length % 2 ? length + 2 : length + 3;\n  curvenessList = [];\n\n  for (var i = 0; i < len; i++) {\n    curvenessList.push((i % 2 ? i + 1 : i) / 10 * (i % 2 ? -1 : 1));\n  }\n\n  seriesModel.__curvenessList = curvenessList;\n};\n/**\n * Create different cache key data in the positive and negative directions, in order to set the curvature later\n * @param {number|string|module:echarts/data/Graph.Node} n1\n * @param {number|string|module:echarts/data/Graph.Node} n2\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @returns {string} key\n */\n\n\nvar getKeyOfEdges = function (n1, n2, seriesModel) {\n  var source = [n1.id, n1.dataIndex].join('.');\n  var target = [n2.id, n2.dataIndex].join('.');\n  return [seriesModel.uid, source, target].join(KEY_DELIMITER);\n};\n/**\n * get opposite key\n * @param {string} key\n * @returns {string}\n */\n\n\nvar getOppositeKey = function (key) {\n  var keys = key.split(KEY_DELIMITER);\n  return [keys[0], keys[2], keys[1]].join(KEY_DELIMITER);\n};\n/**\n * get edgeMap with key\n * @param edge\n * @param {module:echarts/model/SeriesModel} seriesModel\n */\n\n\nvar getEdgeFromMap = function (edge, seriesModel) {\n  var key = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  return seriesModel.__edgeMap[key];\n};\n/**\n * calculate all cases total length\n * @param edge\n * @param seriesModel\n * @returns {number}\n */\n\n\nvar getTotalLengthBetweenNodes = function (edge, seriesModel) {\n  var len = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node1, edge.node2, seriesModel), seriesModel);\n  var lenV = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node2, edge.node1, seriesModel), seriesModel);\n  return len + lenV;\n};\n/**\n *\n * @param key\n */\n\n\nvar getEdgeMapLengthWithKey = function (key, seriesModel) {\n  var edgeMap = seriesModel.__edgeMap;\n  return edgeMap[key] ? edgeMap[key].length : 0;\n};\n/**\n * Count the number of edges between the same two points, used to obtain the curvature table and the parity of the edge\n * @see /graph/GraphSeries.js@getInitialData\n * @param {module:echarts/model/SeriesModel} seriesModel\n */\n\n\nexport function initCurvenessList(seriesModel) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  seriesModel.__curvenessList = [];\n  seriesModel.__edgeMap = {}; // calc the array of curveness List\n\n  createCurveness(seriesModel);\n}\n/**\n * set edgeMap with key\n * @param {number|string|module:echarts/data/Graph.Node} n1\n * @param {number|string|module:echarts/data/Graph.Node} n2\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param {number} index\n */\n\nexport function createEdgeMapForCurveness(n1, n2, seriesModel, index) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  var key = getKeyOfEdges(n1, n2, seriesModel);\n  var edgeMap = seriesModel.__edgeMap;\n  var oppositeEdges = edgeMap[getOppositeKey(key)]; // set direction\n\n  if (edgeMap[key] && !oppositeEdges) {\n    edgeMap[key].isForward = true;\n  } else if (oppositeEdges && edgeMap[key]) {\n    oppositeEdges.isForward = true;\n    edgeMap[key].isForward = false;\n  }\n\n  edgeMap[key] = edgeMap[key] || [];\n  edgeMap[key].push(index);\n}\n/**\n * get curvature for edge\n * @param edge\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param index\n */\n\nexport function getCurvenessForEdge(edge, seriesModel, index, needReverse) {\n  var autoCurvenessParams = getAutoCurvenessParams(seriesModel);\n  var isArrayParam = zrUtil.isArray(autoCurvenessParams);\n\n  if (!autoCurvenessParams) {\n    return null;\n  }\n\n  var edgeArray = getEdgeFromMap(edge, seriesModel);\n\n  if (!edgeArray) {\n    return null;\n  }\n\n  var edgeIndex = -1;\n\n  for (var i = 0; i < edgeArray.length; i++) {\n    if (edgeArray[i] === index) {\n      edgeIndex = i;\n      break;\n    }\n  } // if totalLen is Longer createCurveness\n\n\n  var totalLen = getTotalLengthBetweenNodes(edge, seriesModel);\n  createCurveness(seriesModel, totalLen);\n  edge.lineStyle = edge.lineStyle || {}; // if is opposite edge, must set curvenss to opposite number\n\n  var curKey = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  var curvenessList = seriesModel.__curvenessList; // if pass array no need parity\n\n  var parityCorrection = isArrayParam ? 0 : totalLen % 2 ? 0 : 1;\n\n  if (!edgeArray.isForward) {\n    // the opposite edge show outside\n    var oppositeKey = getOppositeKey(curKey);\n    var len = getEdgeMapLengthWithKey(oppositeKey, seriesModel);\n    var resValue = curvenessList[edgeIndex + len + parityCorrection]; // isNeedReverse, simple, force type need reverse the curveness in the junction of the forword and the opposite\n\n    if (needReverse) {\n      // set as array may make the parity handle with the len of opposite\n      if (isArrayParam) {\n        if (autoCurvenessParams && autoCurvenessParams[0] === 0) {\n          return (len + parityCorrection) % 2 ? resValue : -resValue;\n        } else {\n          return ((len % 2 ? 0 : 1) + parityCorrection) % 2 ? resValue : -resValue;\n        }\n      } else {\n        return (len + parityCorrection) % 2 ? resValue : -resValue;\n      }\n    } else {\n      return curvenessList[edgeIndex + len + parityCorrection];\n    }\n  } else {\n    return curvenessList[parityCorrection + edgeIndex];\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}