{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parse and decode geo json\n */\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport { GeoJSONLineStringGeometry, GeoJSONPolygonGeometry, GeoJSONRegion } from './Region.js';\n\nfunction decode(json) {\n  if (!json.UTF8Encoding) {\n    return json;\n  }\n\n  var jsonCompressed = json;\n  var encodeScale = jsonCompressed.UTF8Scale;\n\n  if (encodeScale == null) {\n    encodeScale = 1024;\n  }\n\n  var features = jsonCompressed.features;\n  zrUtil.each(features, function (feature) {\n    var geometry = feature.geometry;\n    var encodeOffsets = geometry.encodeOffsets;\n    var coordinates = geometry.coordinates; // Geometry may be appeded manually in the script after json loaded.\n    // In this case this geometry is usually not encoded.\n\n    if (!encodeOffsets) {\n      return;\n    }\n\n    switch (geometry.type) {\n      case 'LineString':\n        geometry.coordinates = decodeRing(coordinates, encodeOffsets, encodeScale);\n        break;\n\n      case 'Polygon':\n        decodeRings(coordinates, encodeOffsets, encodeScale);\n        break;\n\n      case 'MultiLineString':\n        decodeRings(coordinates, encodeOffsets, encodeScale);\n        break;\n\n      case 'MultiPolygon':\n        zrUtil.each(coordinates, function (rings, idx) {\n          return decodeRings(rings, encodeOffsets[idx], encodeScale);\n        });\n    }\n  }); // Has been decoded\n\n  jsonCompressed.UTF8Encoding = false;\n  return jsonCompressed;\n}\n\nfunction decodeRings(rings, encodeOffsets, encodeScale) {\n  for (var c = 0; c < rings.length; c++) {\n    rings[c] = decodeRing(rings[c], encodeOffsets[c], encodeScale);\n  }\n}\n\nfunction decodeRing(coordinate, encodeOffsets, encodeScale) {\n  var result = [];\n  var prevX = encodeOffsets[0];\n  var prevY = encodeOffsets[1];\n\n  for (var i = 0; i < coordinate.length; i += 2) {\n    var x = coordinate.charCodeAt(i) - 64;\n    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding\n\n    x = x >> 1 ^ -(x & 1);\n    y = y >> 1 ^ -(y & 1); // Delta deocding\n\n    x += prevX;\n    y += prevY;\n    prevX = x;\n    prevY = y; // Dequantize\n\n    result.push([x / encodeScale, y / encodeScale]);\n  }\n\n  return result;\n}\n\nexport default function parseGeoJSON(geoJson, nameProperty) {\n  geoJson = decode(geoJson);\n  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n    // Output of mapshaper may have geometry null\n    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;\n  }), function (featureObj) {\n    var properties = featureObj.properties;\n    var geo = featureObj.geometry;\n    var geometries = [];\n\n    switch (geo.type) {\n      case 'Polygon':\n        var coordinates = geo.coordinates; // According to the GeoJSON specification.\n        // First must be exterior, and the rest are all interior(holes).\n\n        geometries.push(new GeoJSONPolygonGeometry(coordinates[0], coordinates.slice(1)));\n        break;\n\n      case 'MultiPolygon':\n        zrUtil.each(geo.coordinates, function (item) {\n          if (item[0]) {\n            geometries.push(new GeoJSONPolygonGeometry(item[0], item.slice(1)));\n          }\n        });\n        break;\n\n      case 'LineString':\n        geometries.push(new GeoJSONLineStringGeometry([geo.coordinates]));\n        break;\n\n      case 'MultiLineString':\n        geometries.push(new GeoJSONLineStringGeometry(geo.coordinates));\n    }\n\n    var region = new GeoJSONRegion(properties[nameProperty || 'name'], geometries, properties.cp);\n    region.properties = properties;\n    return region;\n  });\n}","map":{"version":3,"names":["zrUtil","GeoJSONLineStringGeometry","GeoJSONPolygonGeometry","GeoJSONRegion","decode","json","UTF8Encoding","jsonCompressed","encodeScale","UTF8Scale","features","each","feature","geometry","encodeOffsets","coordinates","type","decodeRing","decodeRings","rings","idx","c","length","coordinate","result","prevX","prevY","i","x","charCodeAt","y","push","parseGeoJSON","geoJson","nameProperty","map","filter","featureObj","properties","geo","geometries","slice","item","region","cp"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/coord/geo/parseGeoJson.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parse and decode geo json\n */\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport { GeoJSONLineStringGeometry, GeoJSONPolygonGeometry, GeoJSONRegion } from './Region.js';\n\nfunction decode(json) {\n  if (!json.UTF8Encoding) {\n    return json;\n  }\n\n  var jsonCompressed = json;\n  var encodeScale = jsonCompressed.UTF8Scale;\n\n  if (encodeScale == null) {\n    encodeScale = 1024;\n  }\n\n  var features = jsonCompressed.features;\n  zrUtil.each(features, function (feature) {\n    var geometry = feature.geometry;\n    var encodeOffsets = geometry.encodeOffsets;\n    var coordinates = geometry.coordinates; // Geometry may be appeded manually in the script after json loaded.\n    // In this case this geometry is usually not encoded.\n\n    if (!encodeOffsets) {\n      return;\n    }\n\n    switch (geometry.type) {\n      case 'LineString':\n        geometry.coordinates = decodeRing(coordinates, encodeOffsets, encodeScale);\n        break;\n\n      case 'Polygon':\n        decodeRings(coordinates, encodeOffsets, encodeScale);\n        break;\n\n      case 'MultiLineString':\n        decodeRings(coordinates, encodeOffsets, encodeScale);\n        break;\n\n      case 'MultiPolygon':\n        zrUtil.each(coordinates, function (rings, idx) {\n          return decodeRings(rings, encodeOffsets[idx], encodeScale);\n        });\n    }\n  }); // Has been decoded\n\n  jsonCompressed.UTF8Encoding = false;\n  return jsonCompressed;\n}\n\nfunction decodeRings(rings, encodeOffsets, encodeScale) {\n  for (var c = 0; c < rings.length; c++) {\n    rings[c] = decodeRing(rings[c], encodeOffsets[c], encodeScale);\n  }\n}\n\nfunction decodeRing(coordinate, encodeOffsets, encodeScale) {\n  var result = [];\n  var prevX = encodeOffsets[0];\n  var prevY = encodeOffsets[1];\n\n  for (var i = 0; i < coordinate.length; i += 2) {\n    var x = coordinate.charCodeAt(i) - 64;\n    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding\n\n    x = x >> 1 ^ -(x & 1);\n    y = y >> 1 ^ -(y & 1); // Delta deocding\n\n    x += prevX;\n    y += prevY;\n    prevX = x;\n    prevY = y; // Dequantize\n\n    result.push([x / encodeScale, y / encodeScale]);\n  }\n\n  return result;\n}\n\nexport default function parseGeoJSON(geoJson, nameProperty) {\n  geoJson = decode(geoJson);\n  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n    // Output of mapshaper may have geometry null\n    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;\n  }), function (featureObj) {\n    var properties = featureObj.properties;\n    var geo = featureObj.geometry;\n    var geometries = [];\n\n    switch (geo.type) {\n      case 'Polygon':\n        var coordinates = geo.coordinates; // According to the GeoJSON specification.\n        // First must be exterior, and the rest are all interior(holes).\n\n        geometries.push(new GeoJSONPolygonGeometry(coordinates[0], coordinates.slice(1)));\n        break;\n\n      case 'MultiPolygon':\n        zrUtil.each(geo.coordinates, function (item) {\n          if (item[0]) {\n            geometries.push(new GeoJSONPolygonGeometry(item[0], item.slice(1)));\n          }\n        });\n        break;\n\n      case 'LineString':\n        geometries.push(new GeoJSONLineStringGeometry([geo.coordinates]));\n        break;\n\n      case 'MultiLineString':\n        geometries.push(new GeoJSONLineStringGeometry(geo.coordinates));\n    }\n\n    var region = new GeoJSONRegion(properties[nameProperty || 'name'], geometries, properties.cp);\n    region.properties = properties;\n    return region;\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}