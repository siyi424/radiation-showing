{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport SeriesData from '../../data/SeriesData.js';\nimport Graph from '../../data/Graph.js';\nimport linkSeriesData from '../../data/helper/linkSeriesData.js';\nimport prepareSeriesDataSchema from '../../data/helper/createDimensions.js';\nimport CoordinateSystem from '../../core/CoordinateSystem.js';\nimport createSeriesData from './createSeriesData.js';\nimport { convertOptionIdName } from '../../util/model.js';\nexport default function createGraphFromNodeEdge(nodes, edges, seriesModel, directed, beforeLink) {\n  // ??? TODO\n  // support dataset?\n  var graph = new Graph(directed);\n\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(zrUtil.retrieve( // Id, name, dataIndex\n    nodes[i].id, nodes[i].name, i), i);\n  }\n\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target; // addEdge may fail when source or target not exists\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(zrUtil.retrieve(convertOptionIdName(link.id, null), source + ' > ' + target));\n      linkCount++;\n    }\n  }\n\n  var coordSys = seriesModel.get('coordinateSystem');\n  var nodeData;\n\n  if (coordSys === 'cartesian2d' || coordSys === 'polar') {\n    nodeData = createSeriesData(nodes, seriesModel);\n  } else {\n    var coordSysCtor = CoordinateSystem.get(coordSys);\n    var coordDimensions = coordSysCtor ? coordSysCtor.dimensions || [] : []; // FIXME: Some geo do not need `value` dimenson, whereas `calendar` needs\n    // `value` dimension, but graph need `value` dimension. It's better to\n    // uniform this behavior.\n\n    if (zrUtil.indexOf(coordDimensions, 'value') < 0) {\n      coordDimensions.concat(['value']);\n    }\n\n    var dimensions = prepareSeriesDataSchema(nodes, {\n      coordDimensions: coordDimensions,\n      encodeDefine: seriesModel.getEncode()\n    }).dimensions;\n    nodeData = new SeriesData(dimensions, seriesModel);\n    nodeData.initData(nodes);\n  }\n\n  var edgeData = new SeriesData(['value'], seriesModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkSeriesData({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  }); // Update dataIndex of nodes and edges because invalid edge may be removed\n\n  graph.update();\n  return graph;\n}","map":{"version":3,"names":["zrUtil","SeriesData","Graph","linkSeriesData","prepareSeriesDataSchema","CoordinateSystem","createSeriesData","convertOptionIdName","createGraphFromNodeEdge","nodes","edges","seriesModel","directed","beforeLink","graph","i","length","addNode","retrieve","id","name","linkNameList","validEdges","linkCount","link","source","target","addEdge","push","coordSys","get","nodeData","coordSysCtor","coordDimensions","dimensions","indexOf","concat","encodeDefine","getEncode","initData","edgeData","mainData","struct","structAttr","datas","node","edge","datasAttr","update"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/chart/helper/createGraphFromNodeEdge.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport SeriesData from '../../data/SeriesData.js';\nimport Graph from '../../data/Graph.js';\nimport linkSeriesData from '../../data/helper/linkSeriesData.js';\nimport prepareSeriesDataSchema from '../../data/helper/createDimensions.js';\nimport CoordinateSystem from '../../core/CoordinateSystem.js';\nimport createSeriesData from './createSeriesData.js';\nimport { convertOptionIdName } from '../../util/model.js';\nexport default function createGraphFromNodeEdge(nodes, edges, seriesModel, directed, beforeLink) {\n  // ??? TODO\n  // support dataset?\n  var graph = new Graph(directed);\n\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(zrUtil.retrieve( // Id, name, dataIndex\n    nodes[i].id, nodes[i].name, i), i);\n  }\n\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target; // addEdge may fail when source or target not exists\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(zrUtil.retrieve(convertOptionIdName(link.id, null), source + ' > ' + target));\n      linkCount++;\n    }\n  }\n\n  var coordSys = seriesModel.get('coordinateSystem');\n  var nodeData;\n\n  if (coordSys === 'cartesian2d' || coordSys === 'polar') {\n    nodeData = createSeriesData(nodes, seriesModel);\n  } else {\n    var coordSysCtor = CoordinateSystem.get(coordSys);\n    var coordDimensions = coordSysCtor ? coordSysCtor.dimensions || [] : []; // FIXME: Some geo do not need `value` dimenson, whereas `calendar` needs\n    // `value` dimension, but graph need `value` dimension. It's better to\n    // uniform this behavior.\n\n    if (zrUtil.indexOf(coordDimensions, 'value') < 0) {\n      coordDimensions.concat(['value']);\n    }\n\n    var dimensions = prepareSeriesDataSchema(nodes, {\n      coordDimensions: coordDimensions,\n      encodeDefine: seriesModel.getEncode()\n    }).dimensions;\n    nodeData = new SeriesData(dimensions, seriesModel);\n    nodeData.initData(nodes);\n  }\n\n  var edgeData = new SeriesData(['value'], seriesModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkSeriesData({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  }); // Update dataIndex of nodes and edges because invalid edge may be removed\n\n  graph.update();\n  return graph;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}