{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { trim, isArray, each, reduce } from 'zrender/lib/core/util.js';\nimport { retrieveVisualColorForTooltipMarker, createTooltipMarkup } from './tooltipMarkup.js';\nimport { retrieveRawValue } from '../../data/helper/dataProvider.js';\nimport { isNameSpecified } from '../../util/model.js';\nexport function defaultSeriesFormatTooltip(opt) {\n  var series = opt.series;\n  var dataIndex = opt.dataIndex;\n  var multipleSeries = opt.multipleSeries;\n  var data = series.getData();\n  var tooltipDims = data.mapDimensionsAll('defaultedTooltip');\n  var tooltipDimLen = tooltipDims.length;\n  var value = series.getRawValue(dataIndex);\n  var isValueArr = isArray(value);\n  var markerColor = retrieveVisualColorForTooltipMarker(series, dataIndex); // Complicated rule for pretty tooltip.\n\n  var inlineValue;\n  var inlineValueType;\n  var subBlocks;\n  var sortParam;\n\n  if (tooltipDimLen > 1 || isValueArr && !tooltipDimLen) {\n    var formatArrResult = formatTooltipArrayValue(value, series, dataIndex, tooltipDims, markerColor);\n    inlineValue = formatArrResult.inlineValues;\n    inlineValueType = formatArrResult.inlineValueTypes;\n    subBlocks = formatArrResult.blocks; // Only support tooltip sort by the first inline value. It's enough in most cases.\n\n    sortParam = formatArrResult.inlineValues[0];\n  } else if (tooltipDimLen) {\n    var dimInfo = data.getDimensionInfo(tooltipDims[0]);\n    sortParam = inlineValue = retrieveRawValue(data, dataIndex, tooltipDims[0]);\n    inlineValueType = dimInfo.type;\n  } else {\n    sortParam = inlineValue = isValueArr ? value[0] : value;\n  } // Do not show generated series name. It might not be readable.\n\n\n  var seriesNameSpecified = isNameSpecified(series);\n  var seriesName = seriesNameSpecified && series.name || '';\n  var itemName = data.getName(dataIndex);\n  var inlineName = multipleSeries ? seriesName : itemName;\n  return createTooltipMarkup('section', {\n    header: seriesName,\n    // When series name not specified, do not show a header line with only '-'.\n    // This case alway happen in tooltip.trigger: 'item'.\n    noHeader: multipleSeries || !seriesNameSpecified,\n    sortParam: sortParam,\n    blocks: [createTooltipMarkup('nameValue', {\n      markerType: 'item',\n      markerColor: markerColor,\n      // Do not mix display seriesName and itemName in one tooltip,\n      // which might confuses users.\n      name: inlineName,\n      // name dimension might be auto assigned, where the name might\n      // be not readable. So we check trim here.\n      noName: !trim(inlineName),\n      value: inlineValue,\n      valueType: inlineValueType\n    })].concat(subBlocks || [])\n  });\n}\n\nfunction formatTooltipArrayValue(value, series, dataIndex, tooltipDims, colorStr) {\n  // check: category-no-encode-has-axis-data in dataset.html\n  var data = series.getData();\n  var isValueMultipleLine = reduce(value, function (isValueMultipleLine, val, idx) {\n    var dimItem = data.getDimensionInfo(idx);\n    return isValueMultipleLine = isValueMultipleLine || dimItem && dimItem.tooltip !== false && dimItem.displayName != null;\n  }, false);\n  var inlineValues = [];\n  var inlineValueTypes = [];\n  var blocks = [];\n  tooltipDims.length ? each(tooltipDims, function (dim) {\n    setEachItem(retrieveRawValue(data, dataIndex, dim), dim);\n  }) // By default, all dims is used on tooltip.\n  : each(value, setEachItem);\n\n  function setEachItem(val, dim) {\n    var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.\n\n    if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n      return;\n    }\n\n    if (isValueMultipleLine) {\n      blocks.push(createTooltipMarkup('nameValue', {\n        markerType: 'subItem',\n        markerColor: colorStr,\n        name: dimInfo.displayName,\n        value: val,\n        valueType: dimInfo.type\n      }));\n    } else {\n      inlineValues.push(val);\n      inlineValueTypes.push(dimInfo.type);\n    }\n  }\n\n  return {\n    inlineValues: inlineValues,\n    inlineValueTypes: inlineValueTypes,\n    blocks: blocks\n  };\n}","map":{"version":3,"names":["trim","isArray","each","reduce","retrieveVisualColorForTooltipMarker","createTooltipMarkup","retrieveRawValue","isNameSpecified","defaultSeriesFormatTooltip","opt","series","dataIndex","multipleSeries","data","getData","tooltipDims","mapDimensionsAll","tooltipDimLen","length","value","getRawValue","isValueArr","markerColor","inlineValue","inlineValueType","subBlocks","sortParam","formatArrResult","formatTooltipArrayValue","inlineValues","inlineValueTypes","blocks","dimInfo","getDimensionInfo","type","seriesNameSpecified","seriesName","name","itemName","getName","inlineName","header","noHeader","markerType","noName","valueType","concat","colorStr","isValueMultipleLine","val","idx","dimItem","tooltip","displayName","dim","setEachItem","otherDims","push"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/component/tooltip/seriesFormatTooltip.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { trim, isArray, each, reduce } from 'zrender/lib/core/util.js';\nimport { retrieveVisualColorForTooltipMarker, createTooltipMarkup } from './tooltipMarkup.js';\nimport { retrieveRawValue } from '../../data/helper/dataProvider.js';\nimport { isNameSpecified } from '../../util/model.js';\nexport function defaultSeriesFormatTooltip(opt) {\n  var series = opt.series;\n  var dataIndex = opt.dataIndex;\n  var multipleSeries = opt.multipleSeries;\n  var data = series.getData();\n  var tooltipDims = data.mapDimensionsAll('defaultedTooltip');\n  var tooltipDimLen = tooltipDims.length;\n  var value = series.getRawValue(dataIndex);\n  var isValueArr = isArray(value);\n  var markerColor = retrieveVisualColorForTooltipMarker(series, dataIndex); // Complicated rule for pretty tooltip.\n\n  var inlineValue;\n  var inlineValueType;\n  var subBlocks;\n  var sortParam;\n\n  if (tooltipDimLen > 1 || isValueArr && !tooltipDimLen) {\n    var formatArrResult = formatTooltipArrayValue(value, series, dataIndex, tooltipDims, markerColor);\n    inlineValue = formatArrResult.inlineValues;\n    inlineValueType = formatArrResult.inlineValueTypes;\n    subBlocks = formatArrResult.blocks; // Only support tooltip sort by the first inline value. It's enough in most cases.\n\n    sortParam = formatArrResult.inlineValues[0];\n  } else if (tooltipDimLen) {\n    var dimInfo = data.getDimensionInfo(tooltipDims[0]);\n    sortParam = inlineValue = retrieveRawValue(data, dataIndex, tooltipDims[0]);\n    inlineValueType = dimInfo.type;\n  } else {\n    sortParam = inlineValue = isValueArr ? value[0] : value;\n  } // Do not show generated series name. It might not be readable.\n\n\n  var seriesNameSpecified = isNameSpecified(series);\n  var seriesName = seriesNameSpecified && series.name || '';\n  var itemName = data.getName(dataIndex);\n  var inlineName = multipleSeries ? seriesName : itemName;\n  return createTooltipMarkup('section', {\n    header: seriesName,\n    // When series name not specified, do not show a header line with only '-'.\n    // This case alway happen in tooltip.trigger: 'item'.\n    noHeader: multipleSeries || !seriesNameSpecified,\n    sortParam: sortParam,\n    blocks: [createTooltipMarkup('nameValue', {\n      markerType: 'item',\n      markerColor: markerColor,\n      // Do not mix display seriesName and itemName in one tooltip,\n      // which might confuses users.\n      name: inlineName,\n      // name dimension might be auto assigned, where the name might\n      // be not readable. So we check trim here.\n      noName: !trim(inlineName),\n      value: inlineValue,\n      valueType: inlineValueType\n    })].concat(subBlocks || [])\n  });\n}\n\nfunction formatTooltipArrayValue(value, series, dataIndex, tooltipDims, colorStr) {\n  // check: category-no-encode-has-axis-data in dataset.html\n  var data = series.getData();\n  var isValueMultipleLine = reduce(value, function (isValueMultipleLine, val, idx) {\n    var dimItem = data.getDimensionInfo(idx);\n    return isValueMultipleLine = isValueMultipleLine || dimItem && dimItem.tooltip !== false && dimItem.displayName != null;\n  }, false);\n  var inlineValues = [];\n  var inlineValueTypes = [];\n  var blocks = [];\n  tooltipDims.length ? each(tooltipDims, function (dim) {\n    setEachItem(retrieveRawValue(data, dataIndex, dim), dim);\n  }) // By default, all dims is used on tooltip.\n  : each(value, setEachItem);\n\n  function setEachItem(val, dim) {\n    var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.\n\n    if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n      return;\n    }\n\n    if (isValueMultipleLine) {\n      blocks.push(createTooltipMarkup('nameValue', {\n        markerType: 'subItem',\n        markerColor: colorStr,\n        name: dimInfo.displayName,\n        value: val,\n        valueType: dimInfo.type\n      }));\n    } else {\n      inlineValues.push(val);\n      inlineValueTypes.push(dimInfo.type);\n    }\n  }\n\n  return {\n    inlineValues: inlineValues,\n    inlineValueTypes: inlineValueTypes,\n    blocks: blocks\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}