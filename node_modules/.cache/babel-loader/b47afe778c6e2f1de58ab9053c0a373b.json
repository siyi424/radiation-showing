{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as numberUtil from '../../util/number.js';\nimport { isDimensionStacked } from '../../data/helper/dataStackHelper.js';\nimport { indexOf, curry, clone, isArray } from 'zrender/lib/core/util.js';\nimport { parseDataValue } from '../../data/helper/dataValueHelper.js';\n\nfunction hasXOrY(item) {\n  return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));\n}\n\nfunction hasXAndY(item) {\n  return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));\n}\n\nfunction markerTypeCalculatorWithExtent(markerType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex) {\n  var coordArr = [];\n  var stacked = isDimensionStacked(data, targetDataDim\n  /*, otherDataDim*/\n  );\n  var calcDataDim = stacked ? data.getCalculationInfo('stackResultDimension') : targetDataDim;\n  var value = numCalculate(data, calcDataDim, markerType);\n  var dataIndex = data.indicesOfNearest(calcDataDim, value)[0];\n  coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex);\n  coordArr[targetCoordIndex] = data.get(calcDataDim, dataIndex);\n  var coordArrValue = data.get(targetDataDim, dataIndex); // Make it simple, do not visit all stacked value to count precision.\n\n  var precision = numberUtil.getPrecision(data.get(targetDataDim, dataIndex));\n  precision = Math.min(precision, 20);\n\n  if (precision >= 0) {\n    coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);\n  }\n\n  return [coordArr, coordArrValue];\n} // TODO Specified percent\n\n\nvar markerTypeCalculator = {\n  min: curry(markerTypeCalculatorWithExtent, 'min'),\n  max: curry(markerTypeCalculatorWithExtent, 'max'),\n  average: curry(markerTypeCalculatorWithExtent, 'average'),\n  median: curry(markerTypeCalculatorWithExtent, 'median')\n};\n/**\n * Transform markPoint data item to format used in List by do the following\n * 1. Calculate statistic like `max`, `min`, `average`\n * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array\n */\n\nexport function dataTransform(seriesModel, item) {\n  var data = seriesModel.getData();\n  var coordSys = seriesModel.coordinateSystem; // 1. If not specify the position with pixel directly\n  // 2. If `coord` is not a data array. Which uses `xAxis`,\n  // `yAxis` to specify the coord on each dimension\n  // parseFloat first because item.x and item.y can be percent string like '20%'\n\n  if (item && !hasXAndY(item) && !isArray(item.coord) && coordSys) {\n    var dims = coordSys.dimensions;\n    var axisInfo = getAxisInfo(item, data, coordSys, seriesModel); // Clone the option\n    // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value\n\n    item = clone(item);\n\n    if (item.type && markerTypeCalculator[item.type] && axisInfo.baseAxis && axisInfo.valueAxis) {\n      var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);\n      var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);\n      var coordInfo = markerTypeCalculator[item.type](data, axisInfo.baseDataDim, axisInfo.valueDataDim, otherCoordIndex, targetCoordIndex);\n      item.coord = coordInfo[0]; // Force to use the value of calculated value.\n      // let item use the value without stack.\n\n      item.value = coordInfo[1];\n    } else {\n      // FIXME Only has one of xAxis and yAxis.\n      var coord = [item.xAxis != null ? item.xAxis : item.radiusAxis, item.yAxis != null ? item.yAxis : item.angleAxis]; // Each coord support max, min, average\n\n      for (var i = 0; i < 2; i++) {\n        if (markerTypeCalculator[coord[i]]) {\n          coord[i] = numCalculate(data, data.mapDimension(dims[i]), coord[i]);\n        }\n      }\n\n      item.coord = coord;\n    }\n  }\n\n  return item;\n}\nexport function getAxisInfo(item, data, coordSys, seriesModel) {\n  var ret = {};\n\n  if (item.valueIndex != null || item.valueDim != null) {\n    ret.valueDataDim = item.valueIndex != null ? data.getDimension(item.valueIndex) : item.valueDim;\n    ret.valueAxis = coordSys.getAxis(dataDimToCoordDim(seriesModel, ret.valueDataDim));\n    ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\n  } else {\n    ret.baseAxis = seriesModel.getBaseAxis();\n    ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\n    ret.valueDataDim = data.mapDimension(ret.valueAxis.dim);\n  }\n\n  return ret;\n}\n\nfunction dataDimToCoordDim(seriesModel, dataDim) {\n  var dimItem = seriesModel.getData().getDimensionInfo(dataDim);\n  return dimItem && dimItem.coordDim;\n}\n/**\n * Filter data which is out of coordinateSystem range\n * [dataFilter description]\n */\n\n\nexport function dataFilter( // Currently only polar and cartesian has containData.\ncoordSys, item) {\n  // Alwalys return true if there is no coordSys\n  return coordSys && coordSys.containData && item.coord && !hasXOrY(item) ? coordSys.containData(item.coord) : true;\n}\nexport function zoneFilter( // Currently only polar and cartesian has containData.\ncoordSys, item1, item2) {\n  // Alwalys return true if there is no coordSys\n  return coordSys && coordSys.containZone && item1.coord && item2.coord && !hasXOrY(item1) && !hasXOrY(item2) ? coordSys.containZone(item1.coord, item2.coord) : true;\n}\nexport function createMarkerDimValueGetter(inCoordSys, dims) {\n  return inCoordSys ? function (item, dimName, dataIndex, dimIndex) {\n    var rawVal = dimIndex < 2 // x, y, radius, angle\n    ? item.coord && item.coord[dimIndex] : item.value;\n    return parseDataValue(rawVal, dims[dimIndex]);\n  } : function (item, dimName, dataIndex, dimIndex) {\n    return parseDataValue(item.value, dims[dimIndex]);\n  };\n}\nexport function numCalculate(data, valueDataDim, type) {\n  if (type === 'average') {\n    var sum_1 = 0;\n    var count_1 = 0;\n    data.each(valueDataDim, function (val, idx) {\n      if (!isNaN(val)) {\n        sum_1 += val;\n        count_1++;\n      }\n    });\n    return sum_1 / count_1;\n  } else if (type === 'median') {\n    return data.getMedian(valueDataDim);\n  } else {\n    // max & min\n    return data.getDataExtent(valueDataDim)[type === 'max' ? 1 : 0];\n  }\n}","map":{"version":3,"names":["numberUtil","isDimensionStacked","indexOf","curry","clone","isArray","parseDataValue","hasXOrY","item","isNaN","parseFloat","x","y","hasXAndY","markerTypeCalculatorWithExtent","markerType","data","otherDataDim","targetDataDim","otherCoordIndex","targetCoordIndex","coordArr","stacked","calcDataDim","getCalculationInfo","value","numCalculate","dataIndex","indicesOfNearest","get","coordArrValue","precision","getPrecision","Math","min","toFixed","markerTypeCalculator","max","average","median","dataTransform","seriesModel","getData","coordSys","coordinateSystem","coord","dims","dimensions","axisInfo","getAxisInfo","type","baseAxis","valueAxis","dim","coordInfo","baseDataDim","valueDataDim","xAxis","radiusAxis","yAxis","angleAxis","i","mapDimension","ret","valueIndex","valueDim","getDimension","getAxis","dataDimToCoordDim","getOtherAxis","getBaseAxis","dataDim","dimItem","getDimensionInfo","coordDim","dataFilter","containData","zoneFilter","item1","item2","containZone","createMarkerDimValueGetter","inCoordSys","dimName","dimIndex","rawVal","sum_1","count_1","each","val","idx","getMedian","getDataExtent"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/component/marker/markerHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as numberUtil from '../../util/number.js';\nimport { isDimensionStacked } from '../../data/helper/dataStackHelper.js';\nimport { indexOf, curry, clone, isArray } from 'zrender/lib/core/util.js';\nimport { parseDataValue } from '../../data/helper/dataValueHelper.js';\n\nfunction hasXOrY(item) {\n  return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));\n}\n\nfunction hasXAndY(item) {\n  return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));\n}\n\nfunction markerTypeCalculatorWithExtent(markerType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex) {\n  var coordArr = [];\n  var stacked = isDimensionStacked(data, targetDataDim\n  /*, otherDataDim*/\n  );\n  var calcDataDim = stacked ? data.getCalculationInfo('stackResultDimension') : targetDataDim;\n  var value = numCalculate(data, calcDataDim, markerType);\n  var dataIndex = data.indicesOfNearest(calcDataDim, value)[0];\n  coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex);\n  coordArr[targetCoordIndex] = data.get(calcDataDim, dataIndex);\n  var coordArrValue = data.get(targetDataDim, dataIndex); // Make it simple, do not visit all stacked value to count precision.\n\n  var precision = numberUtil.getPrecision(data.get(targetDataDim, dataIndex));\n  precision = Math.min(precision, 20);\n\n  if (precision >= 0) {\n    coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);\n  }\n\n  return [coordArr, coordArrValue];\n} // TODO Specified percent\n\n\nvar markerTypeCalculator = {\n  min: curry(markerTypeCalculatorWithExtent, 'min'),\n  max: curry(markerTypeCalculatorWithExtent, 'max'),\n  average: curry(markerTypeCalculatorWithExtent, 'average'),\n  median: curry(markerTypeCalculatorWithExtent, 'median')\n};\n/**\n * Transform markPoint data item to format used in List by do the following\n * 1. Calculate statistic like `max`, `min`, `average`\n * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array\n */\n\nexport function dataTransform(seriesModel, item) {\n  var data = seriesModel.getData();\n  var coordSys = seriesModel.coordinateSystem; // 1. If not specify the position with pixel directly\n  // 2. If `coord` is not a data array. Which uses `xAxis`,\n  // `yAxis` to specify the coord on each dimension\n  // parseFloat first because item.x and item.y can be percent string like '20%'\n\n  if (item && !hasXAndY(item) && !isArray(item.coord) && coordSys) {\n    var dims = coordSys.dimensions;\n    var axisInfo = getAxisInfo(item, data, coordSys, seriesModel); // Clone the option\n    // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value\n\n    item = clone(item);\n\n    if (item.type && markerTypeCalculator[item.type] && axisInfo.baseAxis && axisInfo.valueAxis) {\n      var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);\n      var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);\n      var coordInfo = markerTypeCalculator[item.type](data, axisInfo.baseDataDim, axisInfo.valueDataDim, otherCoordIndex, targetCoordIndex);\n      item.coord = coordInfo[0]; // Force to use the value of calculated value.\n      // let item use the value without stack.\n\n      item.value = coordInfo[1];\n    } else {\n      // FIXME Only has one of xAxis and yAxis.\n      var coord = [item.xAxis != null ? item.xAxis : item.radiusAxis, item.yAxis != null ? item.yAxis : item.angleAxis]; // Each coord support max, min, average\n\n      for (var i = 0; i < 2; i++) {\n        if (markerTypeCalculator[coord[i]]) {\n          coord[i] = numCalculate(data, data.mapDimension(dims[i]), coord[i]);\n        }\n      }\n\n      item.coord = coord;\n    }\n  }\n\n  return item;\n}\nexport function getAxisInfo(item, data, coordSys, seriesModel) {\n  var ret = {};\n\n  if (item.valueIndex != null || item.valueDim != null) {\n    ret.valueDataDim = item.valueIndex != null ? data.getDimension(item.valueIndex) : item.valueDim;\n    ret.valueAxis = coordSys.getAxis(dataDimToCoordDim(seriesModel, ret.valueDataDim));\n    ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\n  } else {\n    ret.baseAxis = seriesModel.getBaseAxis();\n    ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\n    ret.valueDataDim = data.mapDimension(ret.valueAxis.dim);\n  }\n\n  return ret;\n}\n\nfunction dataDimToCoordDim(seriesModel, dataDim) {\n  var dimItem = seriesModel.getData().getDimensionInfo(dataDim);\n  return dimItem && dimItem.coordDim;\n}\n/**\n * Filter data which is out of coordinateSystem range\n * [dataFilter description]\n */\n\n\nexport function dataFilter( // Currently only polar and cartesian has containData.\ncoordSys, item) {\n  // Alwalys return true if there is no coordSys\n  return coordSys && coordSys.containData && item.coord && !hasXOrY(item) ? coordSys.containData(item.coord) : true;\n}\nexport function zoneFilter( // Currently only polar and cartesian has containData.\ncoordSys, item1, item2) {\n  // Alwalys return true if there is no coordSys\n  return coordSys && coordSys.containZone && item1.coord && item2.coord && !hasXOrY(item1) && !hasXOrY(item2) ? coordSys.containZone(item1.coord, item2.coord) : true;\n}\nexport function createMarkerDimValueGetter(inCoordSys, dims) {\n  return inCoordSys ? function (item, dimName, dataIndex, dimIndex) {\n    var rawVal = dimIndex < 2 // x, y, radius, angle\n    ? item.coord && item.coord[dimIndex] : item.value;\n    return parseDataValue(rawVal, dims[dimIndex]);\n  } : function (item, dimName, dataIndex, dimIndex) {\n    return parseDataValue(item.value, dims[dimIndex]);\n  };\n}\nexport function numCalculate(data, valueDataDim, type) {\n  if (type === 'average') {\n    var sum_1 = 0;\n    var count_1 = 0;\n    data.each(valueDataDim, function (val, idx) {\n      if (!isNaN(val)) {\n        sum_1 += val;\n        count_1++;\n      }\n    });\n    return sum_1 / count_1;\n  } else if (type === 'median') {\n    return data.getMedian(valueDataDim);\n  } else {\n    // max & min\n    return data.getDataExtent(valueDataDim)[type === 'max' ? 1 : 0];\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}