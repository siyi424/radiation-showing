{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport Model from '../../model/Model.js';\nimport { each, curry, clone, defaults, isArray, indexOf } from 'zrender/lib/core/util.js'; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n// allAxesInfo should be updated when setOption performed.\n\nexport function collect(ecModel, api) {\n  var result = {\n    /**\n     * key: makeKey(axis.model)\n     * value: {\n     *      axis,\n     *      coordSys,\n     *      axisPointerModel,\n     *      triggerTooltip,\n     *      involveSeries,\n     *      snap,\n     *      seriesModels,\n     *      seriesDataCount\n     * }\n     */\n    axesInfo: {},\n    seriesInvolved: false,\n\n    /**\n     * key: makeKey(coordSys.model)\n     * value: Object: key makeKey(axis.model), value: axisInfo\n     */\n    coordSysAxesInfo: {},\n    coordSysMap: {}\n  };\n  collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.\n\n  result.seriesInvolved && collectSeriesInfo(result, ecModel);\n  return result;\n}\n\nfunction collectAxesInfo(result, ecModel, api) {\n  var globalTooltipModel = ecModel.getComponent('tooltip');\n  var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.\n\n  var linksOption = globalAxisPointerModel.get('link', true) || [];\n  var linkGroups = []; // Collect axes info.\n\n  each(api.getCoordinateSystems(), function (coordSys) {\n    // Some coordinate system do not support axes, like geo.\n    if (!coordSys.axisPointerEnabled) {\n      return;\n    }\n\n    var coordSysKey = makeKey(coordSys.model);\n    var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};\n    result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer\n    // for user. So we enable seting tooltip on coordSys model.\n\n    var coordSysModel = coordSys.model;\n    var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);\n    each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.\n    // Notice this case: coordSys is `grid` but not `cartesian2D` here.\n\n    if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not\n    // show but axisPointer will show as normal.\n    && baseTooltipModel.get('show')) {\n      // Compatible with previous logic. But series.tooltip.trigger: 'axis'\n      // or series.data[n].tooltip.trigger: 'axis' are not support any more.\n      var triggerAxis = baseTooltipModel.get('trigger') === 'axis';\n      var cross = baseTooltipModel.get(['axisPointer', 'type']) === 'cross';\n      var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get(['axisPointer', 'axis']));\n\n      if (triggerAxis || cross) {\n        each(tooltipAxes.baseAxes, curry(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));\n      }\n\n      if (cross) {\n        each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));\n      }\n    } // fromTooltip: true | false | 'cross'\n    // triggerTooltip: true | false | null\n\n\n    function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);\n      var axisPointerShow = axisPointerModel.get('show');\n\n      if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {\n        return;\n      }\n\n      if (triggerTooltip == null) {\n        triggerTooltip = axisPointerModel.get('triggerTooltip');\n      }\n\n      axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;\n      var snap = axisPointerModel.get('snap');\n      var axisKey = makeKey(axis.model);\n      var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).\n\n      var axisInfo = result.axesInfo[axisKey] = {\n        key: axisKey,\n        axis: axis,\n        coordSys: coordSys,\n        axisPointerModel: axisPointerModel,\n        triggerTooltip: triggerTooltip,\n        involveSeries: involveSeries,\n        snap: snap,\n        useHandle: isHandleTrigger(axisPointerModel),\n        seriesModels: [],\n        linkGroup: null\n      };\n      axesInfoInCoordSys[axisKey] = axisInfo;\n      result.seriesInvolved = result.seriesInvolved || involveSeries;\n      var groupIndex = getLinkGroupIndex(linksOption, axis);\n\n      if (groupIndex != null) {\n        var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {\n          axesInfo: {}\n        });\n        linkGroup.axesInfo[axisKey] = axisInfo;\n        linkGroup.mapper = linksOption[groupIndex].mapper;\n        axisInfo.linkGroup = linkGroup;\n      }\n    }\n  });\n}\n\nfunction makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {\n  var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');\n  var fields = ['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'];\n  var volatileOption = {};\n  each(fields, function (field) {\n    volatileOption[field] = clone(tooltipAxisPointerModel.get(field));\n  }); // category axis do not auto snap, otherwise some tick that do not\n  // has value can not be hovered. value/time/log axis default snap if\n  // triggered from tooltip and trigger tooltip.\n\n  volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.\n  // Only these properties can be overrided from tooltip to axisPointer.\n\n  if (tooltipAxisPointerModel.get('type') === 'cross') {\n    volatileOption.type = 'line';\n  }\n\n  var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.\n\n  labelOption.show == null && (labelOption.show = false);\n\n  if (fromTooltip === 'cross') {\n    // When 'cross', both axes show labels.\n    var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get(['label', 'show']);\n    labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true; // If triggerTooltip, this is a base axis, which should better not use cross style\n    // (cross style is dashed by default)\n\n    if (!triggerTooltip) {\n      var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');\n      crossStyle && defaults(labelOption, crossStyle.textStyle);\n    }\n  }\n\n  return axis.model.getModel('axisPointer', new Model(volatileOption, globalAxisPointerModel, ecModel));\n}\n\nfunction collectSeriesInfo(result, ecModel) {\n  // Prepare data for axis trigger\n  ecModel.eachSeries(function (seriesModel) {\n    // Notice this case: this coordSys is `cartesian2D` but not `grid`.\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesTooltipTrigger = seriesModel.get(['tooltip', 'trigger'], true);\n    var seriesTooltipShow = seriesModel.get(['tooltip', 'show'], true);\n\n    if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get(['axisPointer', 'show'], true) === false) {\n      return;\n    }\n\n    each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {\n      var axis = axisInfo.axis;\n\n      if (coordSys.getAxis(axis.dim) === axis) {\n        axisInfo.seriesModels.push(seriesModel);\n        axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);\n        axisInfo.seriesDataCount += seriesModel.getData().count();\n      }\n    });\n  });\n}\n/**\n * For example:\n * {\n *     axisPointer: {\n *         links: [{\n *             xAxisIndex: [2, 4],\n *             yAxisIndex: 'all'\n *         }, {\n *             xAxisId: ['a5', 'a7'],\n *             xAxisName: 'xxx'\n *         }]\n *     }\n * }\n */\n\n\nfunction getLinkGroupIndex(linksOption, axis) {\n  var axisModel = axis.model;\n  var dim = axis.dim;\n\n  for (var i = 0; i < linksOption.length; i++) {\n    var linkOption = linksOption[i] || {};\n\n    if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {\n      return i;\n    }\n  }\n}\n\nfunction checkPropInLink(linkPropValue, axisPropValue) {\n  return linkPropValue === 'all' || isArray(linkPropValue) && indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;\n}\n\nexport function fixValue(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n\n  if (!axisInfo) {\n    return;\n  }\n\n  var axisPointerModel = axisInfo.axisPointerModel;\n  var scale = axisInfo.axis.scale;\n  var option = axisPointerModel.option;\n  var status = axisPointerModel.get('status');\n  var value = axisPointerModel.get('value'); // Parse init value for category and time axis.\n\n  if (value != null) {\n    value = scale.parse(value);\n  }\n\n  var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value\n  // and status should be initialized.\n\n  if (status == null) {\n    option.status = useHandle ? 'show' : 'hide';\n  }\n\n  var extent = scale.getExtent().slice();\n  extent[0] > extent[1] && extent.reverse();\n\n  if ( // Pick a value on axis when initializing.\n  value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,\n  // where we should re-pick a value to keep `handle` displaying normally.\n  || value > extent[1]) {\n    // Make handle displayed on the end of the axis when init, which looks better.\n    value = extent[1];\n  }\n\n  if (value < extent[0]) {\n    value = extent[0];\n  }\n\n  option.value = value;\n\n  if (useHandle) {\n    option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';\n  }\n}\nexport function getAxisInfo(axisModel) {\n  var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;\n  return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];\n}\nexport function getAxisPointerModel(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n  return axisInfo && axisInfo.axisPointerModel;\n}\n\nfunction isHandleTrigger(axisPointerModel) {\n  return !!axisPointerModel.get(['handle', 'show']);\n}\n/**\n * @param {module:echarts/model/Model} model\n * @return {string} unique key\n */\n\n\nexport function makeKey(model) {\n  return model.type + '||' + model.id;\n}","map":{"version":3,"names":["Model","each","curry","clone","defaults","isArray","indexOf","collect","ecModel","api","result","axesInfo","seriesInvolved","coordSysAxesInfo","coordSysMap","collectAxesInfo","collectSeriesInfo","globalTooltipModel","getComponent","globalAxisPointerModel","linksOption","get","linkGroups","getCoordinateSystems","coordSys","axisPointerEnabled","coordSysKey","makeKey","model","axesInfoInCoordSys","coordSysModel","baseTooltipModel","getModel","getAxes","saveTooltipAxisInfo","getTooltipAxes","triggerAxis","cross","tooltipAxes","baseAxes","otherAxes","fromTooltip","triggerTooltip","axis","axisPointerModel","axisPointerShow","isHandleTrigger","makeAxisPointerModel","snap","axisKey","involveSeries","type","axisInfo","key","useHandle","seriesModels","linkGroup","groupIndex","getLinkGroupIndex","mapper","tooltipAxisPointerModel","fields","volatileOption","field","labelOption","label","show","tooltipAxisPointerLabelShow","crossStyle","lineStyle","textStyle","eachSeries","seriesModel","coordinateSystem","seriesTooltipTrigger","seriesTooltipShow","getAxis","dim","push","seriesDataCount","getData","count","axisModel","i","length","linkOption","checkPropInLink","id","componentIndex","name","linkPropValue","axisPropValue","fixValue","getAxisInfo","scale","option","status","value","parse","extent","getExtent","slice","reverse","isBlank","getAxisPointerModel"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/component/axisPointer/modelHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport Model from '../../model/Model.js';\nimport { each, curry, clone, defaults, isArray, indexOf } from 'zrender/lib/core/util.js'; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n// allAxesInfo should be updated when setOption performed.\n\nexport function collect(ecModel, api) {\n  var result = {\n    /**\n     * key: makeKey(axis.model)\n     * value: {\n     *      axis,\n     *      coordSys,\n     *      axisPointerModel,\n     *      triggerTooltip,\n     *      involveSeries,\n     *      snap,\n     *      seriesModels,\n     *      seriesDataCount\n     * }\n     */\n    axesInfo: {},\n    seriesInvolved: false,\n\n    /**\n     * key: makeKey(coordSys.model)\n     * value: Object: key makeKey(axis.model), value: axisInfo\n     */\n    coordSysAxesInfo: {},\n    coordSysMap: {}\n  };\n  collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.\n\n  result.seriesInvolved && collectSeriesInfo(result, ecModel);\n  return result;\n}\n\nfunction collectAxesInfo(result, ecModel, api) {\n  var globalTooltipModel = ecModel.getComponent('tooltip');\n  var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.\n\n  var linksOption = globalAxisPointerModel.get('link', true) || [];\n  var linkGroups = []; // Collect axes info.\n\n  each(api.getCoordinateSystems(), function (coordSys) {\n    // Some coordinate system do not support axes, like geo.\n    if (!coordSys.axisPointerEnabled) {\n      return;\n    }\n\n    var coordSysKey = makeKey(coordSys.model);\n    var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};\n    result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer\n    // for user. So we enable seting tooltip on coordSys model.\n\n    var coordSysModel = coordSys.model;\n    var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);\n    each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.\n    // Notice this case: coordSys is `grid` but not `cartesian2D` here.\n\n    if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not\n    // show but axisPointer will show as normal.\n    && baseTooltipModel.get('show')) {\n      // Compatible with previous logic. But series.tooltip.trigger: 'axis'\n      // or series.data[n].tooltip.trigger: 'axis' are not support any more.\n      var triggerAxis = baseTooltipModel.get('trigger') === 'axis';\n      var cross = baseTooltipModel.get(['axisPointer', 'type']) === 'cross';\n      var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get(['axisPointer', 'axis']));\n\n      if (triggerAxis || cross) {\n        each(tooltipAxes.baseAxes, curry(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));\n      }\n\n      if (cross) {\n        each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));\n      }\n    } // fromTooltip: true | false | 'cross'\n    // triggerTooltip: true | false | null\n\n\n    function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);\n      var axisPointerShow = axisPointerModel.get('show');\n\n      if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {\n        return;\n      }\n\n      if (triggerTooltip == null) {\n        triggerTooltip = axisPointerModel.get('triggerTooltip');\n      }\n\n      axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;\n      var snap = axisPointerModel.get('snap');\n      var axisKey = makeKey(axis.model);\n      var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).\n\n      var axisInfo = result.axesInfo[axisKey] = {\n        key: axisKey,\n        axis: axis,\n        coordSys: coordSys,\n        axisPointerModel: axisPointerModel,\n        triggerTooltip: triggerTooltip,\n        involveSeries: involveSeries,\n        snap: snap,\n        useHandle: isHandleTrigger(axisPointerModel),\n        seriesModels: [],\n        linkGroup: null\n      };\n      axesInfoInCoordSys[axisKey] = axisInfo;\n      result.seriesInvolved = result.seriesInvolved || involveSeries;\n      var groupIndex = getLinkGroupIndex(linksOption, axis);\n\n      if (groupIndex != null) {\n        var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {\n          axesInfo: {}\n        });\n        linkGroup.axesInfo[axisKey] = axisInfo;\n        linkGroup.mapper = linksOption[groupIndex].mapper;\n        axisInfo.linkGroup = linkGroup;\n      }\n    }\n  });\n}\n\nfunction makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {\n  var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');\n  var fields = ['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'];\n  var volatileOption = {};\n  each(fields, function (field) {\n    volatileOption[field] = clone(tooltipAxisPointerModel.get(field));\n  }); // category axis do not auto snap, otherwise some tick that do not\n  // has value can not be hovered. value/time/log axis default snap if\n  // triggered from tooltip and trigger tooltip.\n\n  volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.\n  // Only these properties can be overrided from tooltip to axisPointer.\n\n  if (tooltipAxisPointerModel.get('type') === 'cross') {\n    volatileOption.type = 'line';\n  }\n\n  var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.\n\n  labelOption.show == null && (labelOption.show = false);\n\n  if (fromTooltip === 'cross') {\n    // When 'cross', both axes show labels.\n    var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get(['label', 'show']);\n    labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true; // If triggerTooltip, this is a base axis, which should better not use cross style\n    // (cross style is dashed by default)\n\n    if (!triggerTooltip) {\n      var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');\n      crossStyle && defaults(labelOption, crossStyle.textStyle);\n    }\n  }\n\n  return axis.model.getModel('axisPointer', new Model(volatileOption, globalAxisPointerModel, ecModel));\n}\n\nfunction collectSeriesInfo(result, ecModel) {\n  // Prepare data for axis trigger\n  ecModel.eachSeries(function (seriesModel) {\n    // Notice this case: this coordSys is `cartesian2D` but not `grid`.\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesTooltipTrigger = seriesModel.get(['tooltip', 'trigger'], true);\n    var seriesTooltipShow = seriesModel.get(['tooltip', 'show'], true);\n\n    if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get(['axisPointer', 'show'], true) === false) {\n      return;\n    }\n\n    each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {\n      var axis = axisInfo.axis;\n\n      if (coordSys.getAxis(axis.dim) === axis) {\n        axisInfo.seriesModels.push(seriesModel);\n        axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);\n        axisInfo.seriesDataCount += seriesModel.getData().count();\n      }\n    });\n  });\n}\n/**\n * For example:\n * {\n *     axisPointer: {\n *         links: [{\n *             xAxisIndex: [2, 4],\n *             yAxisIndex: 'all'\n *         }, {\n *             xAxisId: ['a5', 'a7'],\n *             xAxisName: 'xxx'\n *         }]\n *     }\n * }\n */\n\n\nfunction getLinkGroupIndex(linksOption, axis) {\n  var axisModel = axis.model;\n  var dim = axis.dim;\n\n  for (var i = 0; i < linksOption.length; i++) {\n    var linkOption = linksOption[i] || {};\n\n    if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {\n      return i;\n    }\n  }\n}\n\nfunction checkPropInLink(linkPropValue, axisPropValue) {\n  return linkPropValue === 'all' || isArray(linkPropValue) && indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;\n}\n\nexport function fixValue(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n\n  if (!axisInfo) {\n    return;\n  }\n\n  var axisPointerModel = axisInfo.axisPointerModel;\n  var scale = axisInfo.axis.scale;\n  var option = axisPointerModel.option;\n  var status = axisPointerModel.get('status');\n  var value = axisPointerModel.get('value'); // Parse init value for category and time axis.\n\n  if (value != null) {\n    value = scale.parse(value);\n  }\n\n  var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value\n  // and status should be initialized.\n\n  if (status == null) {\n    option.status = useHandle ? 'show' : 'hide';\n  }\n\n  var extent = scale.getExtent().slice();\n  extent[0] > extent[1] && extent.reverse();\n\n  if ( // Pick a value on axis when initializing.\n  value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,\n  // where we should re-pick a value to keep `handle` displaying normally.\n  || value > extent[1]) {\n    // Make handle displayed on the end of the axis when init, which looks better.\n    value = extent[1];\n  }\n\n  if (value < extent[0]) {\n    value = extent[0];\n  }\n\n  option.value = value;\n\n  if (useHandle) {\n    option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';\n  }\n}\nexport function getAxisInfo(axisModel) {\n  var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;\n  return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];\n}\nexport function getAxisPointerModel(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n  return axisInfo && axisInfo.axisPointerModel;\n}\n\nfunction isHandleTrigger(axisPointerModel) {\n  return !!axisPointerModel.get(['handle', 'show']);\n}\n/**\n * @param {module:echarts/model/Model} model\n * @return {string} unique key\n */\n\n\nexport function makeKey(model) {\n  return model.type + '||' + model.id;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}