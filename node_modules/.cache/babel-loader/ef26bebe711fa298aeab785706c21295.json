{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport GeoModel from '../../coord/geo/GeoModel.js';\nimport geoCreator from '../../coord/geo/geoCreator.js';\nimport { each } from 'zrender/lib/core/util.js';\nimport { updateCenterAndZoom } from '../../action/roamHelper.js';\nimport GeoView from './GeoView.js';\nimport geoSourceManager from '../../coord/geo/geoSourceManager.js';\n\nfunction registerMap(mapName, geoJson, specialAreas) {\n  geoSourceManager.registerMap(mapName, geoJson, specialAreas);\n}\n\nexport function install(registers) {\n  registers.registerCoordinateSystem('geo', geoCreator);\n  registers.registerComponentModel(GeoModel);\n  registers.registerComponentView(GeoView);\n  registers.registerImpl('registerMap', registerMap);\n  registers.registerImpl('getMap', function (mapName) {\n    return geoSourceManager.getMapForUser(mapName);\n  });\n\n  function makeAction(method, actionInfo) {\n    actionInfo.update = 'geo:updateSelectStatus';\n    registers.registerAction(actionInfo, function (payload, ecModel) {\n      var selected = {};\n      var allSelected = [];\n      ecModel.eachComponent({\n        mainType: 'geo',\n        query: payload\n      }, function (geoModel) {\n        geoModel[method](payload.name);\n        var geo = geoModel.coordinateSystem;\n        each(geo.regions, function (region) {\n          selected[region.name] = geoModel.isSelected(region.name) || false;\n        }); // Notice: there might be duplicated name in different regions.\n\n        var names = [];\n        each(selected, function (v, name) {\n          selected[name] && names.push(name);\n        });\n        allSelected.push({\n          geoIndex: geoModel.componentIndex,\n          // Use singular, the same naming convention as the event `selectchanged`.\n          name: names\n        });\n      });\n      return {\n        selected: selected,\n        allSelected: allSelected,\n        name: payload.name\n      };\n    });\n  }\n\n  makeAction('toggleSelected', {\n    type: 'geoToggleSelect',\n    event: 'geoselectchanged'\n  });\n  makeAction('select', {\n    type: 'geoSelect',\n    event: 'geoselected'\n  });\n  makeAction('unSelect', {\n    type: 'geoUnSelect',\n    event: 'geounselected'\n  });\n  /**\n   * @payload\n   * @property {string} [componentType=series]\n   * @property {number} [dx]\n   * @property {number} [dy]\n   * @property {number} [zoom]\n   * @property {number} [originX]\n   * @property {number} [originY]\n   */\n\n  registers.registerAction({\n    type: 'geoRoam',\n    event: 'geoRoam',\n    update: 'updateTransform'\n  }, function (payload, ecModel, api) {\n    var componentType = payload.componentType || 'series';\n    ecModel.eachComponent({\n      mainType: componentType,\n      query: payload\n    }, function (componentModel) {\n      var geo = componentModel.coordinateSystem;\n\n      if (geo.type !== 'geo') {\n        return;\n      }\n\n      var res = updateCenterAndZoom(geo, payload, componentModel.get('scaleLimit'), api);\n      componentModel.setCenter && componentModel.setCenter(res.center);\n      componentModel.setZoom && componentModel.setZoom(res.zoom); // All map series with same `map` use the same geo coordinate system\n      // So the center and zoom must be in sync. Include the series not selected by legend\n\n      if (componentType === 'series') {\n        each(componentModel.seriesGroup, function (seriesModel) {\n          seriesModel.setCenter(res.center);\n          seriesModel.setZoom(res.zoom);\n        });\n      }\n    });\n  });\n}","map":{"version":3,"names":["GeoModel","geoCreator","each","updateCenterAndZoom","GeoView","geoSourceManager","registerMap","mapName","geoJson","specialAreas","install","registers","registerCoordinateSystem","registerComponentModel","registerComponentView","registerImpl","getMapForUser","makeAction","method","actionInfo","update","registerAction","payload","ecModel","selected","allSelected","eachComponent","mainType","query","geoModel","name","geo","coordinateSystem","regions","region","isSelected","names","v","push","geoIndex","componentIndex","type","event","api","componentType","componentModel","res","get","setCenter","center","setZoom","zoom","seriesGroup","seriesModel"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/component/geo/install.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport GeoModel from '../../coord/geo/GeoModel.js';\nimport geoCreator from '../../coord/geo/geoCreator.js';\nimport { each } from 'zrender/lib/core/util.js';\nimport { updateCenterAndZoom } from '../../action/roamHelper.js';\nimport GeoView from './GeoView.js';\nimport geoSourceManager from '../../coord/geo/geoSourceManager.js';\n\nfunction registerMap(mapName, geoJson, specialAreas) {\n  geoSourceManager.registerMap(mapName, geoJson, specialAreas);\n}\n\nexport function install(registers) {\n  registers.registerCoordinateSystem('geo', geoCreator);\n  registers.registerComponentModel(GeoModel);\n  registers.registerComponentView(GeoView);\n  registers.registerImpl('registerMap', registerMap);\n  registers.registerImpl('getMap', function (mapName) {\n    return geoSourceManager.getMapForUser(mapName);\n  });\n\n  function makeAction(method, actionInfo) {\n    actionInfo.update = 'geo:updateSelectStatus';\n    registers.registerAction(actionInfo, function (payload, ecModel) {\n      var selected = {};\n      var allSelected = [];\n      ecModel.eachComponent({\n        mainType: 'geo',\n        query: payload\n      }, function (geoModel) {\n        geoModel[method](payload.name);\n        var geo = geoModel.coordinateSystem;\n        each(geo.regions, function (region) {\n          selected[region.name] = geoModel.isSelected(region.name) || false;\n        }); // Notice: there might be duplicated name in different regions.\n\n        var names = [];\n        each(selected, function (v, name) {\n          selected[name] && names.push(name);\n        });\n        allSelected.push({\n          geoIndex: geoModel.componentIndex,\n          // Use singular, the same naming convention as the event `selectchanged`.\n          name: names\n        });\n      });\n      return {\n        selected: selected,\n        allSelected: allSelected,\n        name: payload.name\n      };\n    });\n  }\n\n  makeAction('toggleSelected', {\n    type: 'geoToggleSelect',\n    event: 'geoselectchanged'\n  });\n  makeAction('select', {\n    type: 'geoSelect',\n    event: 'geoselected'\n  });\n  makeAction('unSelect', {\n    type: 'geoUnSelect',\n    event: 'geounselected'\n  });\n  /**\n   * @payload\n   * @property {string} [componentType=series]\n   * @property {number} [dx]\n   * @property {number} [dy]\n   * @property {number} [zoom]\n   * @property {number} [originX]\n   * @property {number} [originY]\n   */\n\n  registers.registerAction({\n    type: 'geoRoam',\n    event: 'geoRoam',\n    update: 'updateTransform'\n  }, function (payload, ecModel, api) {\n    var componentType = payload.componentType || 'series';\n    ecModel.eachComponent({\n      mainType: componentType,\n      query: payload\n    }, function (componentModel) {\n      var geo = componentModel.coordinateSystem;\n\n      if (geo.type !== 'geo') {\n        return;\n      }\n\n      var res = updateCenterAndZoom(geo, payload, componentModel.get('scaleLimit'), api);\n      componentModel.setCenter && componentModel.setCenter(res.center);\n      componentModel.setZoom && componentModel.setZoom(res.zoom); // All map series with same `map` use the same geo coordinate system\n      // So the center and zoom must be in sync. Include the series not selected by legend\n\n      if (componentType === 'series') {\n        each(componentModel.seriesGroup, function (seriesModel) {\n          seriesModel.setCenter(res.center);\n          seriesModel.setZoom(res.zoom);\n        });\n      }\n    });\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}