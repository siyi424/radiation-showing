{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// Universal transitions that can animate between any shapes(series) and any properties in any amounts.\nimport { SERIES_UNIVERSAL_TRANSITION_PROP } from '../model/Series.js';\nimport { createHashMap, each, map, filter, isArray, extend } from 'zrender/lib/core/util.js';\nimport { applyMorphAnimation, getPathList } from './morphTransitionHelper.js';\nimport Path from 'zrender/lib/graphic/Path.js';\nimport { initProps } from '../util/graphic.js';\nimport DataDiffer from '../data/DataDiffer.js';\nimport { makeInner, normalizeToArray } from '../util/model.js';\nimport { warn } from '../util/log.js';\nimport { getAnimationConfig, getOldStyle } from './basicTrasition.js';\nimport Displayable from 'zrender/lib/graphic/Displayable.js';\nvar DATA_COUNT_THRESHOLD = 1e4;\n;\nvar getUniversalTransitionGlobalStore = makeInner();\n\nfunction getGroupIdDimension(data) {\n  var dimensions = data.dimensions;\n\n  for (var i = 0; i < dimensions.length; i++) {\n    var dimInfo = data.getDimensionInfo(dimensions[i]);\n\n    if (dimInfo && dimInfo.otherDims.itemGroupId === 0) {\n      return dimensions[i];\n    }\n  }\n}\n\nfunction flattenDataDiffItems(list) {\n  var items = [];\n  each(list, function (seriesInfo) {\n    var data = seriesInfo.data;\n\n    if (data.count() > DATA_COUNT_THRESHOLD) {\n      if (process.env.NODE_ENV !== 'production') {\n        warn('Universal transition is disabled on large data > 10k.');\n      }\n\n      return;\n    }\n\n    var indices = data.getIndices();\n    var groupDim = getGroupIdDimension(data);\n\n    for (var dataIndex = 0; dataIndex < indices.length; dataIndex++) {\n      items.push({\n        data: data,\n        dim: seriesInfo.dim || groupDim,\n        divide: seriesInfo.divide,\n        dataIndex: dataIndex\n      });\n    }\n  });\n  return items;\n}\n\nfunction fadeInElement(newEl, newSeries, newIndex) {\n  newEl.traverse(function (el) {\n    if (el instanceof Path) {\n      // TODO use fade in animation for target element.\n      initProps(el, {\n        style: {\n          opacity: 0\n        }\n      }, newSeries, {\n        dataIndex: newIndex,\n        isFrom: true\n      });\n    }\n  });\n}\n\nfunction removeEl(el) {\n  if (el.parent) {\n    // Bake parent transform to element.\n    // So it can still have proper transform to transition after it's removed.\n    var computedTransform = el.getComputedTransform();\n    el.setLocalTransform(computedTransform);\n    el.parent.remove(el);\n  }\n}\n\nfunction stopAnimation(el) {\n  el.stopAnimation();\n\n  if (el.isGroup) {\n    el.traverse(function (child) {\n      child.stopAnimation();\n    });\n  }\n}\n\nfunction animateElementStyles(el, dataIndex, seriesModel) {\n  var animationConfig = getAnimationConfig('update', seriesModel, dataIndex);\n  animationConfig && el.traverse(function (child) {\n    if (child instanceof Displayable) {\n      var oldStyle = getOldStyle(child);\n\n      if (oldStyle) {\n        child.animateFrom({\n          style: oldStyle\n        }, animationConfig);\n      }\n    }\n  });\n}\n\nfunction isAllIdSame(oldDiffItems, newDiffItems) {\n  var len = oldDiffItems.length;\n\n  if (len !== newDiffItems.length) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    var oldItem = oldDiffItems[i];\n    var newItem = newDiffItems[i];\n\n    if (oldItem.data.getId(oldItem.dataIndex) !== newItem.data.getId(newItem.dataIndex)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction transitionBetween(oldList, newList, api) {\n  var oldDiffItems = flattenDataDiffItems(oldList);\n  var newDiffItems = flattenDataDiffItems(newList);\n\n  function updateMorphingPathProps(from, to, rawFrom, rawTo, animationCfg) {\n    if (rawFrom || from) {\n      to.animateFrom({\n        style: rawFrom && rawFrom !== from ? // dividingMethod like clone may override the style(opacity)\n        // So extend it to raw style.\n        extend(extend({}, rawFrom.style), from.style) : from.style\n      }, animationCfg);\n    }\n  }\n\n  function findKeyDim(items) {\n    for (var i = 0; i < items.length; i++) {\n      if (items[i].dim) {\n        return items[i].dim;\n      }\n    }\n  }\n\n  var oldKeyDim = findKeyDim(oldDiffItems);\n  var newKeyDim = findKeyDim(newDiffItems);\n  var hasMorphAnimation = false;\n\n  function createKeyGetter(isOld, onlyGetId) {\n    return function (diffItem) {\n      var data = diffItem.data;\n      var dataIndex = diffItem.dataIndex; // TODO if specified dim\n\n      if (onlyGetId) {\n        return data.getId(dataIndex);\n      } // Use group id as transition key by default.\n      // So we can achieve multiple to multiple animation like drilldown / up naturally.\n      // If group id not exits. Use id instead. If so, only one to one transition will be applied.\n\n\n      var dataGroupId = data.hostModel && data.hostModel.get('dataGroupId'); // If specified key dimension(itemGroupId by default). Use this same dimension from other data.\n      // PENDING: If only use key dimension of newData.\n\n      var keyDim = isOld ? oldKeyDim || newKeyDim : newKeyDim || oldKeyDim;\n      var dimInfo = keyDim && data.getDimensionInfo(keyDim);\n      var dimOrdinalMeta = dimInfo && dimInfo.ordinalMeta;\n\n      if (dimInfo) {\n        // Get from encode.itemGroupId.\n        var key = data.get(dimInfo.name, dataIndex);\n\n        if (dimOrdinalMeta) {\n          return dimOrdinalMeta.categories[key] || key + '';\n        }\n\n        return key + '';\n      } // Get groupId from raw item. { groupId: '' }\n\n\n      var itemVal = data.getRawDataItem(dataIndex);\n\n      if (itemVal && itemVal.groupId) {\n        return itemVal.groupId + '';\n      }\n\n      return dataGroupId || data.getId(dataIndex);\n    };\n  } // Use id if it's very likely to be an one to one animation\n  // It's more robust than groupId\n  // TODO Check if key dimension is specified.\n\n\n  var useId = isAllIdSame(oldDiffItems, newDiffItems);\n  var isElementStillInChart = {};\n\n  if (!useId) {\n    // We may have different diff strategy with basicTransition if we use other dimension as key.\n    // If so, we can't simply check if oldEl is same with newEl. We need a map to check if oldEl is still being used in the new chart.\n    // We can't use the elements that already being morphed. Let it keep it's original basic transition.\n    for (var i = 0; i < newDiffItems.length; i++) {\n      var newItem = newDiffItems[i];\n      var el = newItem.data.getItemGraphicEl(newItem.dataIndex);\n\n      if (el) {\n        isElementStillInChart[el.id] = true;\n      }\n    }\n  }\n\n  function updateOneToOne(newIndex, oldIndex) {\n    var oldItem = oldDiffItems[oldIndex];\n    var newItem = newDiffItems[newIndex];\n    var newSeries = newItem.data.hostModel; // TODO Mark this elements is morphed and don't morph them anymore\n\n    var oldEl = oldItem.data.getItemGraphicEl(oldItem.dataIndex);\n    var newEl = newItem.data.getItemGraphicEl(newItem.dataIndex); // Can't handle same elements.\n\n    if (oldEl === newEl) {\n      newEl && animateElementStyles(newEl, newItem.dataIndex, newSeries);\n      return;\n    }\n\n    if ( // We can't use the elements that already being morphed\n    oldEl && isElementStillInChart[oldEl.id]) {\n      return;\n    }\n\n    if (newEl) {\n      // TODO: If keep animating the group in case\n      // some of the elements don't want to be morphed.\n      // TODO Label?\n      stopAnimation(newEl);\n\n      if (oldEl) {\n        stopAnimation(oldEl); // If old element is doing leaving animation. stop it and remove it immediately.\n\n        removeEl(oldEl);\n        hasMorphAnimation = true;\n        applyMorphAnimation(getPathList(oldEl), getPathList(newEl), newItem.divide, newSeries, newIndex, updateMorphingPathProps);\n      } else {\n        fadeInElement(newEl, newSeries, newIndex);\n      }\n    } // else keep oldEl leaving animation.\n\n  }\n\n  new DataDiffer(oldDiffItems, newDiffItems, createKeyGetter(true, useId), createKeyGetter(false, useId), null, 'multiple').update(updateOneToOne).updateManyToOne(function (newIndex, oldIndices) {\n    var newItem = newDiffItems[newIndex];\n    var newData = newItem.data;\n    var newSeries = newData.hostModel;\n    var newEl = newData.getItemGraphicEl(newItem.dataIndex);\n    var oldElsList = filter(map(oldIndices, function (idx) {\n      return oldDiffItems[idx].data.getItemGraphicEl(oldDiffItems[idx].dataIndex);\n    }), function (oldEl) {\n      return oldEl && oldEl !== newEl && !isElementStillInChart[oldEl.id];\n    });\n\n    if (newEl) {\n      stopAnimation(newEl);\n\n      if (oldElsList.length) {\n        // If old element is doing leaving animation. stop it and remove it immediately.\n        each(oldElsList, function (oldEl) {\n          stopAnimation(oldEl);\n          removeEl(oldEl);\n        });\n        hasMorphAnimation = true;\n        applyMorphAnimation(getPathList(oldElsList), getPathList(newEl), newItem.divide, newSeries, newIndex, updateMorphingPathProps);\n      } else {\n        fadeInElement(newEl, newSeries, newItem.dataIndex);\n      }\n    } // else keep oldEl leaving animation.\n\n  }).updateOneToMany(function (newIndices, oldIndex) {\n    var oldItem = oldDiffItems[oldIndex];\n    var oldEl = oldItem.data.getItemGraphicEl(oldItem.dataIndex); // We can't use the elements that already being morphed\n\n    if (oldEl && isElementStillInChart[oldEl.id]) {\n      return;\n    }\n\n    var newElsList = filter(map(newIndices, function (idx) {\n      return newDiffItems[idx].data.getItemGraphicEl(newDiffItems[idx].dataIndex);\n    }), function (el) {\n      return el && el !== oldEl;\n    });\n    var newSeris = newDiffItems[newIndices[0]].data.hostModel;\n\n    if (newElsList.length) {\n      each(newElsList, function (newEl) {\n        return stopAnimation(newEl);\n      });\n\n      if (oldEl) {\n        stopAnimation(oldEl); // If old element is doing leaving animation. stop it and remove it immediately.\n\n        removeEl(oldEl);\n        hasMorphAnimation = true;\n        applyMorphAnimation(getPathList(oldEl), getPathList(newElsList), oldItem.divide, // Use divide on old.\n        newSeris, newIndices[0], updateMorphingPathProps);\n      } else {\n        each(newElsList, function (newEl) {\n          return fadeInElement(newEl, newSeris, newIndices[0]);\n        });\n      }\n    } // else keep oldEl leaving animation.\n\n  }).updateManyToMany(function (newIndices, oldIndices) {\n    // If two data are same and both have groupId.\n    // Normally they should be diff by id.\n    new DataDiffer(oldIndices, newIndices, function (rawIdx) {\n      return oldDiffItems[rawIdx].data.getId(oldDiffItems[rawIdx].dataIndex);\n    }, function (rawIdx) {\n      return newDiffItems[rawIdx].data.getId(newDiffItems[rawIdx].dataIndex);\n    }).update(function (newIndex, oldIndex) {\n      // Use the original index\n      updateOneToOne(newIndices[newIndex], oldIndices[oldIndex]);\n    }).execute();\n  }).execute();\n\n  if (hasMorphAnimation) {\n    each(newList, function (_a) {\n      var data = _a.data;\n      var seriesModel = data.hostModel;\n      var view = seriesModel && api.getViewOfSeriesModel(seriesModel);\n      var animationCfg = getAnimationConfig('update', seriesModel, 0); // use 0 index.\n\n      if (view && seriesModel.isAnimationEnabled() && animationCfg && animationCfg.duration > 0) {\n        view.group.traverse(function (el) {\n          if (el instanceof Path && !el.animators.length) {\n            // We can't accept there still exists element that has no animation\n            // if universalTransition is enabled\n            el.animateFrom({\n              style: {\n                opacity: 0\n              }\n            }, animationCfg);\n          }\n        });\n      }\n    });\n  }\n}\n\nfunction getSeriesTransitionKey(series) {\n  var seriesKey = series.getModel('universalTransition').get('seriesKey');\n\n  if (!seriesKey) {\n    // Use series id by default.\n    return series.id;\n  }\n\n  return seriesKey;\n}\n\nfunction convertArraySeriesKeyToString(seriesKey) {\n  if (isArray(seriesKey)) {\n    // Order independent.\n    return seriesKey.sort().join(',');\n  }\n\n  return seriesKey;\n}\n\nfunction getDivideShapeFromData(data) {\n  if (data.hostModel) {\n    return data.hostModel.getModel('universalTransition').get('divideShape');\n  }\n}\n\nfunction findTransitionSeriesBatches(globalStore, params) {\n  var updateBatches = createHashMap();\n  var oldDataMap = createHashMap(); // Map that only store key in array seriesKey.\n  // Which is used to query the old data when transition from one to multiple series.\n\n  var oldDataMapForSplit = createHashMap();\n  each(globalStore.oldSeries, function (series, idx) {\n    var oldData = globalStore.oldData[idx];\n    var transitionKey = getSeriesTransitionKey(series);\n    var transitionKeyStr = convertArraySeriesKeyToString(transitionKey);\n    oldDataMap.set(transitionKeyStr, oldData);\n\n    if (isArray(transitionKey)) {\n      // Same key can't in different array seriesKey.\n      each(transitionKey, function (key) {\n        oldDataMapForSplit.set(key, {\n          data: oldData,\n          key: transitionKeyStr\n        });\n      });\n    }\n  });\n\n  function checkTransitionSeriesKeyDuplicated(transitionKeyStr) {\n    if (updateBatches.get(transitionKeyStr)) {\n      warn(\"Duplicated seriesKey in universalTransition \" + transitionKeyStr);\n    }\n  }\n\n  each(params.updatedSeries, function (series) {\n    if (series.isUniversalTransitionEnabled() && series.isAnimationEnabled()) {\n      var newData = series.getData();\n      var transitionKey = getSeriesTransitionKey(series);\n      var transitionKeyStr = convertArraySeriesKeyToString(transitionKey); // Only transition between series with same id.\n\n      var oldData = oldDataMap.get(transitionKeyStr); // string transition key is the best match.\n\n      if (oldData) {\n        if (process.env.NODE_ENV !== 'production') {\n          checkTransitionSeriesKeyDuplicated(transitionKeyStr);\n        } // TODO check if data is same?\n\n\n        updateBatches.set(transitionKeyStr, {\n          oldSeries: [{\n            divide: getDivideShapeFromData(oldData),\n            data: oldData\n          }],\n          newSeries: [{\n            divide: getDivideShapeFromData(newData),\n            data: newData\n          }]\n        });\n      } else {\n        // Transition from multiple series.\n        if (isArray(transitionKey)) {\n          if (process.env.NODE_ENV !== 'production') {\n            checkTransitionSeriesKeyDuplicated(transitionKeyStr);\n          }\n\n          var oldSeries_1 = [];\n          each(transitionKey, function (key) {\n            var oldData = oldDataMap.get(key);\n\n            if (oldData) {\n              oldSeries_1.push({\n                divide: getDivideShapeFromData(oldData),\n                data: oldData\n              });\n            }\n          });\n\n          if (oldSeries_1.length) {\n            updateBatches.set(transitionKeyStr, {\n              oldSeries: oldSeries_1,\n              newSeries: [{\n                data: newData,\n                divide: getDivideShapeFromData(newData)\n              }]\n            });\n          }\n        } else {\n          // Try transition to multiple series.\n          var oldData_1 = oldDataMapForSplit.get(transitionKey);\n\n          if (oldData_1) {\n            var batch = updateBatches.get(oldData_1.key);\n\n            if (!batch) {\n              batch = {\n                oldSeries: [{\n                  data: oldData_1.data,\n                  divide: getDivideShapeFromData(oldData_1.data)\n                }],\n                newSeries: []\n              };\n              updateBatches.set(oldData_1.key, batch);\n            }\n\n            batch.newSeries.push({\n              data: newData,\n              divide: getDivideShapeFromData(newData)\n            });\n          }\n        }\n      }\n    }\n  });\n  return updateBatches;\n}\n\nfunction querySeries(series, finder) {\n  for (var i = 0; i < series.length; i++) {\n    var found = finder.seriesIndex != null && finder.seriesIndex === series[i].seriesIndex || finder.seriesId != null && finder.seriesId === series[i].id;\n\n    if (found) {\n      return i;\n    }\n  }\n}\n\nfunction transitionSeriesFromOpt(transitionOpt, globalStore, params, api) {\n  var from = [];\n  var to = [];\n  each(normalizeToArray(transitionOpt.from), function (finder) {\n    var idx = querySeries(globalStore.oldSeries, finder);\n\n    if (idx >= 0) {\n      from.push({\n        data: globalStore.oldData[idx],\n        // TODO can specify divideShape in transition.\n        divide: getDivideShapeFromData(globalStore.oldData[idx]),\n        dim: finder.dimension\n      });\n    }\n  });\n  each(normalizeToArray(transitionOpt.to), function (finder) {\n    var idx = querySeries(params.updatedSeries, finder);\n\n    if (idx >= 0) {\n      var data = params.updatedSeries[idx].getData();\n      to.push({\n        data: data,\n        divide: getDivideShapeFromData(data),\n        dim: finder.dimension\n      });\n    }\n  });\n\n  if (from.length > 0 && to.length > 0) {\n    transitionBetween(from, to, api);\n  }\n}\n\nexport function installUniversalTransition(registers) {\n  registers.registerUpdateLifecycle('series:beforeupdate', function (ecMOdel, api, params) {\n    each(normalizeToArray(params.seriesTransition), function (transOpt) {\n      each(normalizeToArray(transOpt.to), function (finder) {\n        var series = params.updatedSeries;\n\n        for (var i = 0; i < series.length; i++) {\n          if (finder.seriesIndex != null && finder.seriesIndex === series[i].seriesIndex || finder.seriesId != null && finder.seriesId === series[i].id) {\n            series[i][SERIES_UNIVERSAL_TRANSITION_PROP] = true;\n          }\n        }\n      });\n    });\n  });\n  registers.registerUpdateLifecycle('series:transition', function (ecModel, api, params) {\n    // TODO api provide an namespace that can save stuff per instance\n    var globalStore = getUniversalTransitionGlobalStore(api); // TODO multiple to multiple series.\n\n    if (globalStore.oldSeries && params.updatedSeries && params.optionChanged) {\n      // Use give transition config if its' give;\n      var transitionOpt = params.seriesTransition;\n\n      if (transitionOpt) {\n        each(normalizeToArray(transitionOpt), function (opt) {\n          transitionSeriesFromOpt(opt, globalStore, params, api);\n        });\n      } else {\n        // Else guess from series based on transition series key.\n        var updateBatches_1 = findTransitionSeriesBatches(globalStore, params);\n        each(updateBatches_1.keys(), function (key) {\n          var batch = updateBatches_1.get(key);\n          transitionBetween(batch.oldSeries, batch.newSeries, api);\n        });\n      } // Reset\n\n\n      each(params.updatedSeries, function (series) {\n        // Reset;\n        if (series[SERIES_UNIVERSAL_TRANSITION_PROP]) {\n          series[SERIES_UNIVERSAL_TRANSITION_PROP] = false;\n        }\n      });\n    } // Save all series of current update. Not only the updated one.\n\n\n    var allSeries = ecModel.getSeries();\n    var savedSeries = globalStore.oldSeries = [];\n    var savedData = globalStore.oldData = [];\n\n    for (var i = 0; i < allSeries.length; i++) {\n      var data = allSeries[i].getData(); // Only save the data that can have transition.\n      // Avoid large data costing too much extra memory\n\n      if (data.count() < DATA_COUNT_THRESHOLD) {\n        savedSeries.push(allSeries[i]);\n        savedData.push(data);\n      }\n    }\n  });\n}","map":{"version":3,"names":["SERIES_UNIVERSAL_TRANSITION_PROP","createHashMap","each","map","filter","isArray","extend","applyMorphAnimation","getPathList","Path","initProps","DataDiffer","makeInner","normalizeToArray","warn","getAnimationConfig","getOldStyle","Displayable","DATA_COUNT_THRESHOLD","getUniversalTransitionGlobalStore","getGroupIdDimension","data","dimensions","i","length","dimInfo","getDimensionInfo","otherDims","itemGroupId","flattenDataDiffItems","list","items","seriesInfo","count","process","env","NODE_ENV","indices","getIndices","groupDim","dataIndex","push","dim","divide","fadeInElement","newEl","newSeries","newIndex","traverse","el","style","opacity","isFrom","removeEl","parent","computedTransform","getComputedTransform","setLocalTransform","remove","stopAnimation","isGroup","child","animateElementStyles","seriesModel","animationConfig","oldStyle","animateFrom","isAllIdSame","oldDiffItems","newDiffItems","len","oldItem","newItem","getId","transitionBetween","oldList","newList","api","updateMorphingPathProps","from","to","rawFrom","rawTo","animationCfg","findKeyDim","oldKeyDim","newKeyDim","hasMorphAnimation","createKeyGetter","isOld","onlyGetId","diffItem","dataGroupId","hostModel","get","keyDim","dimOrdinalMeta","ordinalMeta","key","name","categories","itemVal","getRawDataItem","groupId","useId","isElementStillInChart","getItemGraphicEl","id","updateOneToOne","oldIndex","oldEl","update","updateManyToOne","oldIndices","newData","oldElsList","idx","updateOneToMany","newIndices","newElsList","newSeris","updateManyToMany","rawIdx","execute","_a","view","getViewOfSeriesModel","isAnimationEnabled","duration","group","animators","getSeriesTransitionKey","series","seriesKey","getModel","convertArraySeriesKeyToString","sort","join","getDivideShapeFromData","findTransitionSeriesBatches","globalStore","params","updateBatches","oldDataMap","oldDataMapForSplit","oldSeries","oldData","transitionKey","transitionKeyStr","set","checkTransitionSeriesKeyDuplicated","updatedSeries","isUniversalTransitionEnabled","getData","oldSeries_1","oldData_1","batch","querySeries","finder","found","seriesIndex","seriesId","transitionSeriesFromOpt","transitionOpt","dimension","installUniversalTransition","registers","registerUpdateLifecycle","ecMOdel","seriesTransition","transOpt","ecModel","optionChanged","opt","updateBatches_1","keys","allSeries","getSeries","savedSeries","savedData"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/animation/universalTransition.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// Universal transitions that can animate between any shapes(series) and any properties in any amounts.\nimport { SERIES_UNIVERSAL_TRANSITION_PROP } from '../model/Series.js';\nimport { createHashMap, each, map, filter, isArray, extend } from 'zrender/lib/core/util.js';\nimport { applyMorphAnimation, getPathList } from './morphTransitionHelper.js';\nimport Path from 'zrender/lib/graphic/Path.js';\nimport { initProps } from '../util/graphic.js';\nimport DataDiffer from '../data/DataDiffer.js';\nimport { makeInner, normalizeToArray } from '../util/model.js';\nimport { warn } from '../util/log.js';\nimport { getAnimationConfig, getOldStyle } from './basicTrasition.js';\nimport Displayable from 'zrender/lib/graphic/Displayable.js';\nvar DATA_COUNT_THRESHOLD = 1e4;\n;\nvar getUniversalTransitionGlobalStore = makeInner();\n\nfunction getGroupIdDimension(data) {\n  var dimensions = data.dimensions;\n\n  for (var i = 0; i < dimensions.length; i++) {\n    var dimInfo = data.getDimensionInfo(dimensions[i]);\n\n    if (dimInfo && dimInfo.otherDims.itemGroupId === 0) {\n      return dimensions[i];\n    }\n  }\n}\n\nfunction flattenDataDiffItems(list) {\n  var items = [];\n  each(list, function (seriesInfo) {\n    var data = seriesInfo.data;\n\n    if (data.count() > DATA_COUNT_THRESHOLD) {\n      if (process.env.NODE_ENV !== 'production') {\n        warn('Universal transition is disabled on large data > 10k.');\n      }\n\n      return;\n    }\n\n    var indices = data.getIndices();\n    var groupDim = getGroupIdDimension(data);\n\n    for (var dataIndex = 0; dataIndex < indices.length; dataIndex++) {\n      items.push({\n        data: data,\n        dim: seriesInfo.dim || groupDim,\n        divide: seriesInfo.divide,\n        dataIndex: dataIndex\n      });\n    }\n  });\n  return items;\n}\n\nfunction fadeInElement(newEl, newSeries, newIndex) {\n  newEl.traverse(function (el) {\n    if (el instanceof Path) {\n      // TODO use fade in animation for target element.\n      initProps(el, {\n        style: {\n          opacity: 0\n        }\n      }, newSeries, {\n        dataIndex: newIndex,\n        isFrom: true\n      });\n    }\n  });\n}\n\nfunction removeEl(el) {\n  if (el.parent) {\n    // Bake parent transform to element.\n    // So it can still have proper transform to transition after it's removed.\n    var computedTransform = el.getComputedTransform();\n    el.setLocalTransform(computedTransform);\n    el.parent.remove(el);\n  }\n}\n\nfunction stopAnimation(el) {\n  el.stopAnimation();\n\n  if (el.isGroup) {\n    el.traverse(function (child) {\n      child.stopAnimation();\n    });\n  }\n}\n\nfunction animateElementStyles(el, dataIndex, seriesModel) {\n  var animationConfig = getAnimationConfig('update', seriesModel, dataIndex);\n  animationConfig && el.traverse(function (child) {\n    if (child instanceof Displayable) {\n      var oldStyle = getOldStyle(child);\n\n      if (oldStyle) {\n        child.animateFrom({\n          style: oldStyle\n        }, animationConfig);\n      }\n    }\n  });\n}\n\nfunction isAllIdSame(oldDiffItems, newDiffItems) {\n  var len = oldDiffItems.length;\n\n  if (len !== newDiffItems.length) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    var oldItem = oldDiffItems[i];\n    var newItem = newDiffItems[i];\n\n    if (oldItem.data.getId(oldItem.dataIndex) !== newItem.data.getId(newItem.dataIndex)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction transitionBetween(oldList, newList, api) {\n  var oldDiffItems = flattenDataDiffItems(oldList);\n  var newDiffItems = flattenDataDiffItems(newList);\n\n  function updateMorphingPathProps(from, to, rawFrom, rawTo, animationCfg) {\n    if (rawFrom || from) {\n      to.animateFrom({\n        style: rawFrom && rawFrom !== from ? // dividingMethod like clone may override the style(opacity)\n        // So extend it to raw style.\n        extend(extend({}, rawFrom.style), from.style) : from.style\n      }, animationCfg);\n    }\n  }\n\n  function findKeyDim(items) {\n    for (var i = 0; i < items.length; i++) {\n      if (items[i].dim) {\n        return items[i].dim;\n      }\n    }\n  }\n\n  var oldKeyDim = findKeyDim(oldDiffItems);\n  var newKeyDim = findKeyDim(newDiffItems);\n  var hasMorphAnimation = false;\n\n  function createKeyGetter(isOld, onlyGetId) {\n    return function (diffItem) {\n      var data = diffItem.data;\n      var dataIndex = diffItem.dataIndex; // TODO if specified dim\n\n      if (onlyGetId) {\n        return data.getId(dataIndex);\n      } // Use group id as transition key by default.\n      // So we can achieve multiple to multiple animation like drilldown / up naturally.\n      // If group id not exits. Use id instead. If so, only one to one transition will be applied.\n\n\n      var dataGroupId = data.hostModel && data.hostModel.get('dataGroupId'); // If specified key dimension(itemGroupId by default). Use this same dimension from other data.\n      // PENDING: If only use key dimension of newData.\n\n      var keyDim = isOld ? oldKeyDim || newKeyDim : newKeyDim || oldKeyDim;\n      var dimInfo = keyDim && data.getDimensionInfo(keyDim);\n      var dimOrdinalMeta = dimInfo && dimInfo.ordinalMeta;\n\n      if (dimInfo) {\n        // Get from encode.itemGroupId.\n        var key = data.get(dimInfo.name, dataIndex);\n\n        if (dimOrdinalMeta) {\n          return dimOrdinalMeta.categories[key] || key + '';\n        }\n\n        return key + '';\n      } // Get groupId from raw item. { groupId: '' }\n\n\n      var itemVal = data.getRawDataItem(dataIndex);\n\n      if (itemVal && itemVal.groupId) {\n        return itemVal.groupId + '';\n      }\n\n      return dataGroupId || data.getId(dataIndex);\n    };\n  } // Use id if it's very likely to be an one to one animation\n  // It's more robust than groupId\n  // TODO Check if key dimension is specified.\n\n\n  var useId = isAllIdSame(oldDiffItems, newDiffItems);\n  var isElementStillInChart = {};\n\n  if (!useId) {\n    // We may have different diff strategy with basicTransition if we use other dimension as key.\n    // If so, we can't simply check if oldEl is same with newEl. We need a map to check if oldEl is still being used in the new chart.\n    // We can't use the elements that already being morphed. Let it keep it's original basic transition.\n    for (var i = 0; i < newDiffItems.length; i++) {\n      var newItem = newDiffItems[i];\n      var el = newItem.data.getItemGraphicEl(newItem.dataIndex);\n\n      if (el) {\n        isElementStillInChart[el.id] = true;\n      }\n    }\n  }\n\n  function updateOneToOne(newIndex, oldIndex) {\n    var oldItem = oldDiffItems[oldIndex];\n    var newItem = newDiffItems[newIndex];\n    var newSeries = newItem.data.hostModel; // TODO Mark this elements is morphed and don't morph them anymore\n\n    var oldEl = oldItem.data.getItemGraphicEl(oldItem.dataIndex);\n    var newEl = newItem.data.getItemGraphicEl(newItem.dataIndex); // Can't handle same elements.\n\n    if (oldEl === newEl) {\n      newEl && animateElementStyles(newEl, newItem.dataIndex, newSeries);\n      return;\n    }\n\n    if ( // We can't use the elements that already being morphed\n    oldEl && isElementStillInChart[oldEl.id]) {\n      return;\n    }\n\n    if (newEl) {\n      // TODO: If keep animating the group in case\n      // some of the elements don't want to be morphed.\n      // TODO Label?\n      stopAnimation(newEl);\n\n      if (oldEl) {\n        stopAnimation(oldEl); // If old element is doing leaving animation. stop it and remove it immediately.\n\n        removeEl(oldEl);\n        hasMorphAnimation = true;\n        applyMorphAnimation(getPathList(oldEl), getPathList(newEl), newItem.divide, newSeries, newIndex, updateMorphingPathProps);\n      } else {\n        fadeInElement(newEl, newSeries, newIndex);\n      }\n    } // else keep oldEl leaving animation.\n\n  }\n\n  new DataDiffer(oldDiffItems, newDiffItems, createKeyGetter(true, useId), createKeyGetter(false, useId), null, 'multiple').update(updateOneToOne).updateManyToOne(function (newIndex, oldIndices) {\n    var newItem = newDiffItems[newIndex];\n    var newData = newItem.data;\n    var newSeries = newData.hostModel;\n    var newEl = newData.getItemGraphicEl(newItem.dataIndex);\n    var oldElsList = filter(map(oldIndices, function (idx) {\n      return oldDiffItems[idx].data.getItemGraphicEl(oldDiffItems[idx].dataIndex);\n    }), function (oldEl) {\n      return oldEl && oldEl !== newEl && !isElementStillInChart[oldEl.id];\n    });\n\n    if (newEl) {\n      stopAnimation(newEl);\n\n      if (oldElsList.length) {\n        // If old element is doing leaving animation. stop it and remove it immediately.\n        each(oldElsList, function (oldEl) {\n          stopAnimation(oldEl);\n          removeEl(oldEl);\n        });\n        hasMorphAnimation = true;\n        applyMorphAnimation(getPathList(oldElsList), getPathList(newEl), newItem.divide, newSeries, newIndex, updateMorphingPathProps);\n      } else {\n        fadeInElement(newEl, newSeries, newItem.dataIndex);\n      }\n    } // else keep oldEl leaving animation.\n\n  }).updateOneToMany(function (newIndices, oldIndex) {\n    var oldItem = oldDiffItems[oldIndex];\n    var oldEl = oldItem.data.getItemGraphicEl(oldItem.dataIndex); // We can't use the elements that already being morphed\n\n    if (oldEl && isElementStillInChart[oldEl.id]) {\n      return;\n    }\n\n    var newElsList = filter(map(newIndices, function (idx) {\n      return newDiffItems[idx].data.getItemGraphicEl(newDiffItems[idx].dataIndex);\n    }), function (el) {\n      return el && el !== oldEl;\n    });\n    var newSeris = newDiffItems[newIndices[0]].data.hostModel;\n\n    if (newElsList.length) {\n      each(newElsList, function (newEl) {\n        return stopAnimation(newEl);\n      });\n\n      if (oldEl) {\n        stopAnimation(oldEl); // If old element is doing leaving animation. stop it and remove it immediately.\n\n        removeEl(oldEl);\n        hasMorphAnimation = true;\n        applyMorphAnimation(getPathList(oldEl), getPathList(newElsList), oldItem.divide, // Use divide on old.\n        newSeris, newIndices[0], updateMorphingPathProps);\n      } else {\n        each(newElsList, function (newEl) {\n          return fadeInElement(newEl, newSeris, newIndices[0]);\n        });\n      }\n    } // else keep oldEl leaving animation.\n\n  }).updateManyToMany(function (newIndices, oldIndices) {\n    // If two data are same and both have groupId.\n    // Normally they should be diff by id.\n    new DataDiffer(oldIndices, newIndices, function (rawIdx) {\n      return oldDiffItems[rawIdx].data.getId(oldDiffItems[rawIdx].dataIndex);\n    }, function (rawIdx) {\n      return newDiffItems[rawIdx].data.getId(newDiffItems[rawIdx].dataIndex);\n    }).update(function (newIndex, oldIndex) {\n      // Use the original index\n      updateOneToOne(newIndices[newIndex], oldIndices[oldIndex]);\n    }).execute();\n  }).execute();\n\n  if (hasMorphAnimation) {\n    each(newList, function (_a) {\n      var data = _a.data;\n      var seriesModel = data.hostModel;\n      var view = seriesModel && api.getViewOfSeriesModel(seriesModel);\n      var animationCfg = getAnimationConfig('update', seriesModel, 0); // use 0 index.\n\n      if (view && seriesModel.isAnimationEnabled() && animationCfg && animationCfg.duration > 0) {\n        view.group.traverse(function (el) {\n          if (el instanceof Path && !el.animators.length) {\n            // We can't accept there still exists element that has no animation\n            // if universalTransition is enabled\n            el.animateFrom({\n              style: {\n                opacity: 0\n              }\n            }, animationCfg);\n          }\n        });\n      }\n    });\n  }\n}\n\nfunction getSeriesTransitionKey(series) {\n  var seriesKey = series.getModel('universalTransition').get('seriesKey');\n\n  if (!seriesKey) {\n    // Use series id by default.\n    return series.id;\n  }\n\n  return seriesKey;\n}\n\nfunction convertArraySeriesKeyToString(seriesKey) {\n  if (isArray(seriesKey)) {\n    // Order independent.\n    return seriesKey.sort().join(',');\n  }\n\n  return seriesKey;\n}\n\nfunction getDivideShapeFromData(data) {\n  if (data.hostModel) {\n    return data.hostModel.getModel('universalTransition').get('divideShape');\n  }\n}\n\nfunction findTransitionSeriesBatches(globalStore, params) {\n  var updateBatches = createHashMap();\n  var oldDataMap = createHashMap(); // Map that only store key in array seriesKey.\n  // Which is used to query the old data when transition from one to multiple series.\n\n  var oldDataMapForSplit = createHashMap();\n  each(globalStore.oldSeries, function (series, idx) {\n    var oldData = globalStore.oldData[idx];\n    var transitionKey = getSeriesTransitionKey(series);\n    var transitionKeyStr = convertArraySeriesKeyToString(transitionKey);\n    oldDataMap.set(transitionKeyStr, oldData);\n\n    if (isArray(transitionKey)) {\n      // Same key can't in different array seriesKey.\n      each(transitionKey, function (key) {\n        oldDataMapForSplit.set(key, {\n          data: oldData,\n          key: transitionKeyStr\n        });\n      });\n    }\n  });\n\n  function checkTransitionSeriesKeyDuplicated(transitionKeyStr) {\n    if (updateBatches.get(transitionKeyStr)) {\n      warn(\"Duplicated seriesKey in universalTransition \" + transitionKeyStr);\n    }\n  }\n\n  each(params.updatedSeries, function (series) {\n    if (series.isUniversalTransitionEnabled() && series.isAnimationEnabled()) {\n      var newData = series.getData();\n      var transitionKey = getSeriesTransitionKey(series);\n      var transitionKeyStr = convertArraySeriesKeyToString(transitionKey); // Only transition between series with same id.\n\n      var oldData = oldDataMap.get(transitionKeyStr); // string transition key is the best match.\n\n      if (oldData) {\n        if (process.env.NODE_ENV !== 'production') {\n          checkTransitionSeriesKeyDuplicated(transitionKeyStr);\n        } // TODO check if data is same?\n\n\n        updateBatches.set(transitionKeyStr, {\n          oldSeries: [{\n            divide: getDivideShapeFromData(oldData),\n            data: oldData\n          }],\n          newSeries: [{\n            divide: getDivideShapeFromData(newData),\n            data: newData\n          }]\n        });\n      } else {\n        // Transition from multiple series.\n        if (isArray(transitionKey)) {\n          if (process.env.NODE_ENV !== 'production') {\n            checkTransitionSeriesKeyDuplicated(transitionKeyStr);\n          }\n\n          var oldSeries_1 = [];\n          each(transitionKey, function (key) {\n            var oldData = oldDataMap.get(key);\n\n            if (oldData) {\n              oldSeries_1.push({\n                divide: getDivideShapeFromData(oldData),\n                data: oldData\n              });\n            }\n          });\n\n          if (oldSeries_1.length) {\n            updateBatches.set(transitionKeyStr, {\n              oldSeries: oldSeries_1,\n              newSeries: [{\n                data: newData,\n                divide: getDivideShapeFromData(newData)\n              }]\n            });\n          }\n        } else {\n          // Try transition to multiple series.\n          var oldData_1 = oldDataMapForSplit.get(transitionKey);\n\n          if (oldData_1) {\n            var batch = updateBatches.get(oldData_1.key);\n\n            if (!batch) {\n              batch = {\n                oldSeries: [{\n                  data: oldData_1.data,\n                  divide: getDivideShapeFromData(oldData_1.data)\n                }],\n                newSeries: []\n              };\n              updateBatches.set(oldData_1.key, batch);\n            }\n\n            batch.newSeries.push({\n              data: newData,\n              divide: getDivideShapeFromData(newData)\n            });\n          }\n        }\n      }\n    }\n  });\n  return updateBatches;\n}\n\nfunction querySeries(series, finder) {\n  for (var i = 0; i < series.length; i++) {\n    var found = finder.seriesIndex != null && finder.seriesIndex === series[i].seriesIndex || finder.seriesId != null && finder.seriesId === series[i].id;\n\n    if (found) {\n      return i;\n    }\n  }\n}\n\nfunction transitionSeriesFromOpt(transitionOpt, globalStore, params, api) {\n  var from = [];\n  var to = [];\n  each(normalizeToArray(transitionOpt.from), function (finder) {\n    var idx = querySeries(globalStore.oldSeries, finder);\n\n    if (idx >= 0) {\n      from.push({\n        data: globalStore.oldData[idx],\n        // TODO can specify divideShape in transition.\n        divide: getDivideShapeFromData(globalStore.oldData[idx]),\n        dim: finder.dimension\n      });\n    }\n  });\n  each(normalizeToArray(transitionOpt.to), function (finder) {\n    var idx = querySeries(params.updatedSeries, finder);\n\n    if (idx >= 0) {\n      var data = params.updatedSeries[idx].getData();\n      to.push({\n        data: data,\n        divide: getDivideShapeFromData(data),\n        dim: finder.dimension\n      });\n    }\n  });\n\n  if (from.length > 0 && to.length > 0) {\n    transitionBetween(from, to, api);\n  }\n}\n\nexport function installUniversalTransition(registers) {\n  registers.registerUpdateLifecycle('series:beforeupdate', function (ecMOdel, api, params) {\n    each(normalizeToArray(params.seriesTransition), function (transOpt) {\n      each(normalizeToArray(transOpt.to), function (finder) {\n        var series = params.updatedSeries;\n\n        for (var i = 0; i < series.length; i++) {\n          if (finder.seriesIndex != null && finder.seriesIndex === series[i].seriesIndex || finder.seriesId != null && finder.seriesId === series[i].id) {\n            series[i][SERIES_UNIVERSAL_TRANSITION_PROP] = true;\n          }\n        }\n      });\n    });\n  });\n  registers.registerUpdateLifecycle('series:transition', function (ecModel, api, params) {\n    // TODO api provide an namespace that can save stuff per instance\n    var globalStore = getUniversalTransitionGlobalStore(api); // TODO multiple to multiple series.\n\n    if (globalStore.oldSeries && params.updatedSeries && params.optionChanged) {\n      // Use give transition config if its' give;\n      var transitionOpt = params.seriesTransition;\n\n      if (transitionOpt) {\n        each(normalizeToArray(transitionOpt), function (opt) {\n          transitionSeriesFromOpt(opt, globalStore, params, api);\n        });\n      } else {\n        // Else guess from series based on transition series key.\n        var updateBatches_1 = findTransitionSeriesBatches(globalStore, params);\n        each(updateBatches_1.keys(), function (key) {\n          var batch = updateBatches_1.get(key);\n          transitionBetween(batch.oldSeries, batch.newSeries, api);\n        });\n      } // Reset\n\n\n      each(params.updatedSeries, function (series) {\n        // Reset;\n        if (series[SERIES_UNIVERSAL_TRANSITION_PROP]) {\n          series[SERIES_UNIVERSAL_TRANSITION_PROP] = false;\n        }\n      });\n    } // Save all series of current update. Not only the updated one.\n\n\n    var allSeries = ecModel.getSeries();\n    var savedSeries = globalStore.oldSeries = [];\n    var savedData = globalStore.oldData = [];\n\n    for (var i = 0; i < allSeries.length; i++) {\n      var data = allSeries[i].getData(); // Only save the data that can have transition.\n      // Avoid large data costing too much extra memory\n\n      if (data.count() < DATA_COUNT_THRESHOLD) {\n        savedSeries.push(allSeries[i]);\n        savedData.push(data);\n      }\n    }\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}