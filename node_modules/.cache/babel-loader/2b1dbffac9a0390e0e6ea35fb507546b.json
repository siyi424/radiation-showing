{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport BoundingRect from 'zrender/lib/core/BoundingRect.js';\nimport * as vec2 from 'zrender/lib/core/vector.js';\nimport * as polygonContain from 'zrender/lib/contain/polygon.js';\nimport * as matrix from 'zrender/lib/core/matrix.js';\nimport { each } from 'zrender/lib/core/util.js';\nvar TMP_TRANSFORM = [];\n\nfunction transformPoints(points, transform) {\n  for (var p = 0; p < points.length; p++) {\n    vec2.applyTransform(points[p], points[p], transform);\n  }\n}\n\nfunction updateBBoxFromPoints(points, min, max, projection) {\n  for (var i = 0; i < points.length; i++) {\n    var p = points[i];\n\n    if (projection) {\n      // projection may return null point.\n      p = projection.project(p);\n    }\n\n    if (p && isFinite(p[0]) && isFinite(p[1])) {\n      vec2.min(min, min, p);\n      vec2.max(max, max, p);\n    }\n  }\n}\n\nfunction centroid(points) {\n  var signedArea = 0;\n  var cx = 0;\n  var cy = 0;\n  var len = points.length;\n  var x0 = points[len - 1][0];\n  var y0 = points[len - 1][1]; // Polygon should been closed.\n\n  for (var i = 0; i < len; i++) {\n    var x1 = points[i][0];\n    var y1 = points[i][1];\n    var a = x0 * y1 - x1 * y0;\n    signedArea += a;\n    cx += (x0 + x1) * a;\n    cy += (y0 + y1) * a;\n    x0 = x1;\n    y0 = y1;\n  }\n\n  return signedArea ? [cx / signedArea / 3, cy / signedArea / 3, signedArea] : [points[0][0] || 0, points[0][1] || 0];\n}\n\nvar Region =\n/** @class */\nfunction () {\n  function Region(name) {\n    this.name = name;\n  }\n\n  Region.prototype.setCenter = function (center) {\n    this._center = center;\n  };\n  /**\n   * Get center point in data unit. That is,\n   * for GeoJSONRegion, the unit is lat/lng,\n   * for GeoSVGRegion, the unit is SVG local coord.\n   */\n\n\n  Region.prototype.getCenter = function () {\n    var center = this._center;\n\n    if (!center) {\n      // In most cases there are no need to calculate this center.\n      // So calculate only when called.\n      center = this._center = this.calcCenter();\n    }\n\n    return center;\n  };\n\n  return Region;\n}();\n\nexport { Region };\n\nvar GeoJSONPolygonGeometry =\n/** @class */\nfunction () {\n  function GeoJSONPolygonGeometry(exterior, interiors) {\n    this.type = 'polygon';\n    this.exterior = exterior;\n    this.interiors = interiors;\n  }\n\n  return GeoJSONPolygonGeometry;\n}();\n\nexport { GeoJSONPolygonGeometry };\n\nvar GeoJSONLineStringGeometry =\n/** @class */\nfunction () {\n  function GeoJSONLineStringGeometry(points) {\n    this.type = 'linestring';\n    this.points = points;\n  }\n\n  return GeoJSONLineStringGeometry;\n}();\n\nexport { GeoJSONLineStringGeometry };\n\nvar GeoJSONRegion =\n/** @class */\nfunction (_super) {\n  __extends(GeoJSONRegion, _super);\n\n  function GeoJSONRegion(name, geometries, cp) {\n    var _this = _super.call(this, name) || this;\n\n    _this.type = 'geoJSON';\n    _this.geometries = geometries;\n    _this._center = cp && [cp[0], cp[1]];\n    return _this;\n  }\n\n  GeoJSONRegion.prototype.calcCenter = function () {\n    var geometries = this.geometries;\n    var largestGeo;\n    var largestGeoSize = 0;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geo = geometries[i];\n      var exterior = geo.exterior; // Simple trick to use points count instead of polygon area as region size.\n      // Ignore linestring\n\n      var size = exterior && exterior.length;\n\n      if (size > largestGeoSize) {\n        largestGeo = geo;\n        largestGeoSize = size;\n      }\n    }\n\n    if (largestGeo) {\n      return centroid(largestGeo.exterior);\n    } // from bounding rect by default.\n\n\n    var rect = this.getBoundingRect();\n    return [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  };\n\n  GeoJSONRegion.prototype.getBoundingRect = function (projection) {\n    var rect = this._rect; // Always recalculate if using projection.\n\n    if (rect && !projection) {\n      return rect;\n    }\n\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n    var geometries = this.geometries;\n    each(geometries, function (geo) {\n      if (geo.type === 'polygon') {\n        // Doesn't consider hole\n        updateBBoxFromPoints(geo.exterior, min, max, projection);\n      } else {\n        each(geo.points, function (points) {\n          updateBBoxFromPoints(points, min, max, projection);\n        });\n      }\n    }); // Normalie invalid bounding.\n\n    if (!(isFinite(min[0]) && isFinite(min[1]) && isFinite(max[0]) && isFinite(max[1]))) {\n      min[0] = min[1] = max[0] = max[1] = 0;\n    }\n\n    rect = new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\n    if (!projection) {\n      this._rect = rect;\n    }\n\n    return rect;\n  };\n\n  GeoJSONRegion.prototype.contain = function (coord) {\n    var rect = this.getBoundingRect();\n    var geometries = this.geometries;\n\n    if (!rect.contain(coord[0], coord[1])) {\n      return false;\n    }\n\n    loopGeo: for (var i = 0, len = geometries.length; i < len; i++) {\n      var geo = geometries[i]; // Only support polygon.\n\n      if (geo.type !== 'polygon') {\n        continue;\n      }\n\n      var exterior = geo.exterior;\n      var interiors = geo.interiors;\n\n      if (polygonContain.contain(exterior, coord[0], coord[1])) {\n        // Not in the region if point is in the hole.\n        for (var k = 0; k < (interiors ? interiors.length : 0); k++) {\n          if (polygonContain.contain(interiors[k], coord[0], coord[1])) {\n            continue loopGeo;\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Transform the raw coords to target bounding.\n   * @param x\n   * @param y\n   * @param width\n   * @param height\n   */\n\n\n  GeoJSONRegion.prototype.transformTo = function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var aspect = rect.width / rect.height;\n\n    if (!width) {\n      width = aspect * height;\n    } else if (!height) {\n      height = width / aspect;\n    }\n\n    var target = new BoundingRect(x, y, width, height);\n    var transform = rect.calculateTransform(target);\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geo = geometries[i];\n\n      if (geo.type === 'polygon') {\n        transformPoints(geo.exterior, transform);\n        each(geo.interiors, function (interior) {\n          transformPoints(interior, transform);\n        });\n      } else {\n        each(geo.points, function (points) {\n          transformPoints(points, transform);\n        });\n      }\n    }\n\n    rect = this._rect;\n    rect.copy(target); // Update center\n\n    this._center = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  };\n\n  GeoJSONRegion.prototype.cloneShallow = function (name) {\n    name == null && (name = this.name);\n    var newRegion = new GeoJSONRegion(name, this.geometries, this._center);\n    newRegion._rect = this._rect;\n    newRegion.transformTo = null; // Simply avoid to be called.\n\n    return newRegion;\n  };\n\n  return GeoJSONRegion;\n}(Region);\n\nexport { GeoJSONRegion };\n\nvar GeoSVGRegion =\n/** @class */\nfunction (_super) {\n  __extends(GeoSVGRegion, _super);\n\n  function GeoSVGRegion(name, elOnlyForCalculate) {\n    var _this = _super.call(this, name) || this;\n\n    _this.type = 'geoSVG';\n    _this._elOnlyForCalculate = elOnlyForCalculate;\n    return _this;\n  }\n\n  GeoSVGRegion.prototype.calcCenter = function () {\n    var el = this._elOnlyForCalculate;\n    var rect = el.getBoundingRect();\n    var center = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n    var mat = matrix.identity(TMP_TRANSFORM);\n    var target = el;\n\n    while (target && !target.isGeoSVGGraphicRoot) {\n      matrix.mul(mat, target.getLocalTransform(), mat);\n      target = target.parent;\n    }\n\n    matrix.invert(mat, mat);\n    vec2.applyTransform(center, center, mat);\n    return center;\n  };\n\n  return GeoSVGRegion;\n}(Region);\n\nexport { GeoSVGRegion };","map":{"version":3,"names":["__extends","BoundingRect","vec2","polygonContain","matrix","each","TMP_TRANSFORM","transformPoints","points","transform","p","length","applyTransform","updateBBoxFromPoints","min","max","projection","i","project","isFinite","centroid","signedArea","cx","cy","len","x0","y0","x1","y1","a","Region","name","prototype","setCenter","center","_center","getCenter","calcCenter","GeoJSONPolygonGeometry","exterior","interiors","type","GeoJSONLineStringGeometry","GeoJSONRegion","_super","geometries","cp","_this","call","largestGeo","largestGeoSize","geo","size","rect","getBoundingRect","x","width","y","height","_rect","Infinity","contain","coord","loopGeo","k","transformTo","aspect","target","calculateTransform","interior","copy","cloneShallow","newRegion","GeoSVGRegion","elOnlyForCalculate","_elOnlyForCalculate","el","mat","identity","isGeoSVGGraphicRoot","mul","getLocalTransform","parent","invert"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/coord/geo/Region.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport BoundingRect from 'zrender/lib/core/BoundingRect.js';\nimport * as vec2 from 'zrender/lib/core/vector.js';\nimport * as polygonContain from 'zrender/lib/contain/polygon.js';\nimport * as matrix from 'zrender/lib/core/matrix.js';\nimport { each } from 'zrender/lib/core/util.js';\nvar TMP_TRANSFORM = [];\n\nfunction transformPoints(points, transform) {\n  for (var p = 0; p < points.length; p++) {\n    vec2.applyTransform(points[p], points[p], transform);\n  }\n}\n\nfunction updateBBoxFromPoints(points, min, max, projection) {\n  for (var i = 0; i < points.length; i++) {\n    var p = points[i];\n\n    if (projection) {\n      // projection may return null point.\n      p = projection.project(p);\n    }\n\n    if (p && isFinite(p[0]) && isFinite(p[1])) {\n      vec2.min(min, min, p);\n      vec2.max(max, max, p);\n    }\n  }\n}\n\nfunction centroid(points) {\n  var signedArea = 0;\n  var cx = 0;\n  var cy = 0;\n  var len = points.length;\n  var x0 = points[len - 1][0];\n  var y0 = points[len - 1][1]; // Polygon should been closed.\n\n  for (var i = 0; i < len; i++) {\n    var x1 = points[i][0];\n    var y1 = points[i][1];\n    var a = x0 * y1 - x1 * y0;\n    signedArea += a;\n    cx += (x0 + x1) * a;\n    cy += (y0 + y1) * a;\n    x0 = x1;\n    y0 = y1;\n  }\n\n  return signedArea ? [cx / signedArea / 3, cy / signedArea / 3, signedArea] : [points[0][0] || 0, points[0][1] || 0];\n}\n\nvar Region =\n/** @class */\nfunction () {\n  function Region(name) {\n    this.name = name;\n  }\n\n  Region.prototype.setCenter = function (center) {\n    this._center = center;\n  };\n  /**\n   * Get center point in data unit. That is,\n   * for GeoJSONRegion, the unit is lat/lng,\n   * for GeoSVGRegion, the unit is SVG local coord.\n   */\n\n\n  Region.prototype.getCenter = function () {\n    var center = this._center;\n\n    if (!center) {\n      // In most cases there are no need to calculate this center.\n      // So calculate only when called.\n      center = this._center = this.calcCenter();\n    }\n\n    return center;\n  };\n\n  return Region;\n}();\n\nexport { Region };\n\nvar GeoJSONPolygonGeometry =\n/** @class */\nfunction () {\n  function GeoJSONPolygonGeometry(exterior, interiors) {\n    this.type = 'polygon';\n    this.exterior = exterior;\n    this.interiors = interiors;\n  }\n\n  return GeoJSONPolygonGeometry;\n}();\n\nexport { GeoJSONPolygonGeometry };\n\nvar GeoJSONLineStringGeometry =\n/** @class */\nfunction () {\n  function GeoJSONLineStringGeometry(points) {\n    this.type = 'linestring';\n    this.points = points;\n  }\n\n  return GeoJSONLineStringGeometry;\n}();\n\nexport { GeoJSONLineStringGeometry };\n\nvar GeoJSONRegion =\n/** @class */\nfunction (_super) {\n  __extends(GeoJSONRegion, _super);\n\n  function GeoJSONRegion(name, geometries, cp) {\n    var _this = _super.call(this, name) || this;\n\n    _this.type = 'geoJSON';\n    _this.geometries = geometries;\n    _this._center = cp && [cp[0], cp[1]];\n    return _this;\n  }\n\n  GeoJSONRegion.prototype.calcCenter = function () {\n    var geometries = this.geometries;\n    var largestGeo;\n    var largestGeoSize = 0;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geo = geometries[i];\n      var exterior = geo.exterior; // Simple trick to use points count instead of polygon area as region size.\n      // Ignore linestring\n\n      var size = exterior && exterior.length;\n\n      if (size > largestGeoSize) {\n        largestGeo = geo;\n        largestGeoSize = size;\n      }\n    }\n\n    if (largestGeo) {\n      return centroid(largestGeo.exterior);\n    } // from bounding rect by default.\n\n\n    var rect = this.getBoundingRect();\n    return [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  };\n\n  GeoJSONRegion.prototype.getBoundingRect = function (projection) {\n    var rect = this._rect; // Always recalculate if using projection.\n\n    if (rect && !projection) {\n      return rect;\n    }\n\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n    var geometries = this.geometries;\n    each(geometries, function (geo) {\n      if (geo.type === 'polygon') {\n        // Doesn't consider hole\n        updateBBoxFromPoints(geo.exterior, min, max, projection);\n      } else {\n        each(geo.points, function (points) {\n          updateBBoxFromPoints(points, min, max, projection);\n        });\n      }\n    }); // Normalie invalid bounding.\n\n    if (!(isFinite(min[0]) && isFinite(min[1]) && isFinite(max[0]) && isFinite(max[1]))) {\n      min[0] = min[1] = max[0] = max[1] = 0;\n    }\n\n    rect = new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\n    if (!projection) {\n      this._rect = rect;\n    }\n\n    return rect;\n  };\n\n  GeoJSONRegion.prototype.contain = function (coord) {\n    var rect = this.getBoundingRect();\n    var geometries = this.geometries;\n\n    if (!rect.contain(coord[0], coord[1])) {\n      return false;\n    }\n\n    loopGeo: for (var i = 0, len = geometries.length; i < len; i++) {\n      var geo = geometries[i]; // Only support polygon.\n\n      if (geo.type !== 'polygon') {\n        continue;\n      }\n\n      var exterior = geo.exterior;\n      var interiors = geo.interiors;\n\n      if (polygonContain.contain(exterior, coord[0], coord[1])) {\n        // Not in the region if point is in the hole.\n        for (var k = 0; k < (interiors ? interiors.length : 0); k++) {\n          if (polygonContain.contain(interiors[k], coord[0], coord[1])) {\n            continue loopGeo;\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Transform the raw coords to target bounding.\n   * @param x\n   * @param y\n   * @param width\n   * @param height\n   */\n\n\n  GeoJSONRegion.prototype.transformTo = function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var aspect = rect.width / rect.height;\n\n    if (!width) {\n      width = aspect * height;\n    } else if (!height) {\n      height = width / aspect;\n    }\n\n    var target = new BoundingRect(x, y, width, height);\n    var transform = rect.calculateTransform(target);\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geo = geometries[i];\n\n      if (geo.type === 'polygon') {\n        transformPoints(geo.exterior, transform);\n        each(geo.interiors, function (interior) {\n          transformPoints(interior, transform);\n        });\n      } else {\n        each(geo.points, function (points) {\n          transformPoints(points, transform);\n        });\n      }\n    }\n\n    rect = this._rect;\n    rect.copy(target); // Update center\n\n    this._center = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  };\n\n  GeoJSONRegion.prototype.cloneShallow = function (name) {\n    name == null && (name = this.name);\n    var newRegion = new GeoJSONRegion(name, this.geometries, this._center);\n    newRegion._rect = this._rect;\n    newRegion.transformTo = null; // Simply avoid to be called.\n\n    return newRegion;\n  };\n\n  return GeoJSONRegion;\n}(Region);\n\nexport { GeoJSONRegion };\n\nvar GeoSVGRegion =\n/** @class */\nfunction (_super) {\n  __extends(GeoSVGRegion, _super);\n\n  function GeoSVGRegion(name, elOnlyForCalculate) {\n    var _this = _super.call(this, name) || this;\n\n    _this.type = 'geoSVG';\n    _this._elOnlyForCalculate = elOnlyForCalculate;\n    return _this;\n  }\n\n  GeoSVGRegion.prototype.calcCenter = function () {\n    var el = this._elOnlyForCalculate;\n    var rect = el.getBoundingRect();\n    var center = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n    var mat = matrix.identity(TMP_TRANSFORM);\n    var target = el;\n\n    while (target && !target.isGeoSVGGraphicRoot) {\n      matrix.mul(mat, target.getLocalTransform(), mat);\n      target = target.parent;\n    }\n\n    matrix.invert(mat, mat);\n    vec2.applyTransform(center, center, mat);\n    return center;\n  };\n\n  return GeoSVGRegion;\n}(Region);\n\nexport { GeoSVGRegion };"],"mappings":"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"},"metadata":{},"sourceType":"module"}