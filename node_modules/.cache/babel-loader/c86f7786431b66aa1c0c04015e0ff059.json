{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* A third-party license is embeded for some of the code in this file:\n* The tree layoutHelper implementation was originally copied from\n* \"d3.js\"(https://github.com/d3/d3-hierarchy) with\n* some modifications made for this project.\n* (see more details in the comment of the specific method below.)\n* The use of the source code of this file is also subject to the terms\n* and consitions of the licence of \"d3.js\" (BSD-3Clause, see\n* </licenses/LICENSE-d3>).\n*/\n\n/**\n * @file The layout algorithm of node-link tree diagrams. Here we using Reingold-Tilford algorithm to drawing\n *       the tree.\n */\nimport * as layout from '../../util/layout.js';\n/**\n * Initialize all computational message for following algorithm.\n */\n\nexport function init(inRoot) {\n  var root = inRoot;\n  root.hierNode = {\n    defaultAncestor: null,\n    ancestor: root,\n    prelim: 0,\n    modifier: 0,\n    change: 0,\n    shift: 0,\n    i: 0,\n    thread: null\n  };\n  var nodes = [root];\n  var node;\n  var children;\n\n  while (node = nodes.pop()) {\n    // jshint ignore:line\n    children = node.children;\n\n    if (node.isExpand && children.length) {\n      var n = children.length;\n\n      for (var i = n - 1; i >= 0; i--) {\n        var child = children[i];\n        child.hierNode = {\n          defaultAncestor: null,\n          ancestor: child,\n          prelim: 0,\n          modifier: 0,\n          change: 0,\n          shift: 0,\n          i: i,\n          thread: null\n        };\n        nodes.push(child);\n      }\n    }\n  }\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Computes a preliminary x coordinate for node. Before that, this function is\n * applied recursively to the children of node, as well as the function\n * apportion(). After spacing out the children by calling executeShifts(), the\n * node is placed to the midpoint of its outermost children.\n */\n\nexport function firstWalk(node, separation) {\n  var children = node.isExpand ? node.children : [];\n  var siblings = node.parentNode.children;\n  var subtreeW = node.hierNode.i ? siblings[node.hierNode.i - 1] : null;\n\n  if (children.length) {\n    executeShifts(node);\n    var midPoint = (children[0].hierNode.prelim + children[children.length - 1].hierNode.prelim) / 2;\n\n    if (subtreeW) {\n      node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\n      node.hierNode.modifier = node.hierNode.prelim - midPoint;\n    } else {\n      node.hierNode.prelim = midPoint;\n    }\n  } else if (subtreeW) {\n    node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\n  }\n\n  node.parentNode.hierNode.defaultAncestor = apportion(node, subtreeW, node.parentNode.hierNode.defaultAncestor || siblings[0], separation);\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Computes all real x-coordinates by summing up the modifiers recursively.\n */\n\nexport function secondWalk(node) {\n  var nodeX = node.hierNode.prelim + node.parentNode.hierNode.modifier;\n  node.setLayout({\n    x: nodeX\n  }, true);\n  node.hierNode.modifier += node.parentNode.hierNode.modifier;\n}\nexport function separation(cb) {\n  return arguments.length ? cb : defaultSeparation;\n}\n/**\n * Transform the common coordinate to radial coordinate.\n */\n\nexport function radialCoordinate(rad, r) {\n  rad -= Math.PI / 2;\n  return {\n    x: r * Math.cos(rad),\n    y: r * Math.sin(rad)\n  };\n}\n/**\n * Get the layout position of the whole view.\n */\n\nexport function getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n/**\n * All other shifts, applied to the smaller subtrees between w- and w+, are\n * performed by this function.\n *\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n */\n\nfunction executeShifts(node) {\n  var children = node.children;\n  var n = children.length;\n  var shift = 0;\n  var change = 0;\n\n  while (--n >= 0) {\n    var child = children[n];\n    child.hierNode.prelim += shift;\n    child.hierNode.modifier += shift;\n    change += child.hierNode.change;\n    shift += child.hierNode.shift + change;\n  }\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * The core of the algorithm. Here, a new subtree is combined with the\n * previous subtrees. Threads are used to traverse the inside and outside\n * contours of the left and right subtree up to the highest common level.\n * Whenever two nodes of the inside contours conflict, we compute the left\n * one of the greatest uncommon ancestors using the function nextAncestor()\n * and call moveSubtree() to shift the subtree and prepare the shifts of\n * smaller subtrees. Finally, we add a new thread (if necessary).\n */\n\n\nfunction apportion(subtreeV, subtreeW, ancestor, separation) {\n  if (subtreeW) {\n    var nodeOutRight = subtreeV;\n    var nodeInRight = subtreeV;\n    var nodeOutLeft = nodeInRight.parentNode.children[0];\n    var nodeInLeft = subtreeW;\n    var sumOutRight = nodeOutRight.hierNode.modifier;\n    var sumInRight = nodeInRight.hierNode.modifier;\n    var sumOutLeft = nodeOutLeft.hierNode.modifier;\n    var sumInLeft = nodeInLeft.hierNode.modifier;\n\n    while (nodeInLeft = nextRight(nodeInLeft), nodeInRight = nextLeft(nodeInRight), nodeInLeft && nodeInRight) {\n      nodeOutRight = nextRight(nodeOutRight);\n      nodeOutLeft = nextLeft(nodeOutLeft);\n      nodeOutRight.hierNode.ancestor = subtreeV;\n      var shift = nodeInLeft.hierNode.prelim + sumInLeft - nodeInRight.hierNode.prelim - sumInRight + separation(nodeInLeft, nodeInRight);\n\n      if (shift > 0) {\n        moveSubtree(nextAncestor(nodeInLeft, subtreeV, ancestor), subtreeV, shift);\n        sumInRight += shift;\n        sumOutRight += shift;\n      }\n\n      sumInLeft += nodeInLeft.hierNode.modifier;\n      sumInRight += nodeInRight.hierNode.modifier;\n      sumOutRight += nodeOutRight.hierNode.modifier;\n      sumOutLeft += nodeOutLeft.hierNode.modifier;\n    }\n\n    if (nodeInLeft && !nextRight(nodeOutRight)) {\n      nodeOutRight.hierNode.thread = nodeInLeft;\n      nodeOutRight.hierNode.modifier += sumInLeft - sumOutRight;\n    }\n\n    if (nodeInRight && !nextLeft(nodeOutLeft)) {\n      nodeOutLeft.hierNode.thread = nodeInRight;\n      nodeOutLeft.hierNode.modifier += sumInRight - sumOutLeft;\n      ancestor = subtreeV;\n    }\n  }\n\n  return ancestor;\n}\n/**\n * This function is used to traverse the right contour of a subtree.\n * It returns the rightmost child of node or the thread of node. The function\n * returns null if and only if node is on the highest depth of its subtree.\n */\n\n\nfunction nextRight(node) {\n  var children = node.children;\n  return children.length && node.isExpand ? children[children.length - 1] : node.hierNode.thread;\n}\n/**\n * This function is used to traverse the left contour of a subtree (or a subforest).\n * It returns the leftmost child of node or the thread of node. The function\n * returns null if and only if node is on the highest depth of its subtree.\n */\n\n\nfunction nextLeft(node) {\n  var children = node.children;\n  return children.length && node.isExpand ? children[0] : node.hierNode.thread;\n}\n/**\n * If nodeInLeft’s ancestor is a sibling of node, returns nodeInLeft’s ancestor.\n * Otherwise, returns the specified ancestor.\n */\n\n\nfunction nextAncestor(nodeInLeft, node, ancestor) {\n  return nodeInLeft.hierNode.ancestor.parentNode === node.parentNode ? nodeInLeft.hierNode.ancestor : ancestor;\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Shifts the current subtree rooted at wr.\n * This is done by increasing prelim(w+) and modifier(w+) by shift.\n */\n\n\nfunction moveSubtree(wl, wr, shift) {\n  var change = shift / (wr.hierNode.i - wl.hierNode.i);\n  wr.hierNode.change -= change;\n  wr.hierNode.shift += shift;\n  wr.hierNode.modifier += shift;\n  wr.hierNode.prelim += shift;\n  wl.hierNode.change += change;\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n */\n\n\nfunction defaultSeparation(node1, node2) {\n  return node1.parentNode === node2.parentNode ? 1 : 2;\n}","map":{"version":3,"names":["layout","init","inRoot","root","hierNode","defaultAncestor","ancestor","prelim","modifier","change","shift","i","thread","nodes","node","children","pop","isExpand","length","n","child","push","firstWalk","separation","siblings","parentNode","subtreeW","executeShifts","midPoint","apportion","secondWalk","nodeX","setLayout","x","cb","arguments","defaultSeparation","radialCoordinate","rad","r","Math","PI","cos","y","sin","getViewRect","seriesModel","api","getLayoutRect","getBoxLayoutParams","width","getWidth","height","getHeight","subtreeV","nodeOutRight","nodeInRight","nodeOutLeft","nodeInLeft","sumOutRight","sumInRight","sumOutLeft","sumInLeft","nextRight","nextLeft","moveSubtree","nextAncestor","wl","wr","node1","node2"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/chart/tree/layoutHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* A third-party license is embeded for some of the code in this file:\n* The tree layoutHelper implementation was originally copied from\n* \"d3.js\"(https://github.com/d3/d3-hierarchy) with\n* some modifications made for this project.\n* (see more details in the comment of the specific method below.)\n* The use of the source code of this file is also subject to the terms\n* and consitions of the licence of \"d3.js\" (BSD-3Clause, see\n* </licenses/LICENSE-d3>).\n*/\n\n/**\n * @file The layout algorithm of node-link tree diagrams. Here we using Reingold-Tilford algorithm to drawing\n *       the tree.\n */\nimport * as layout from '../../util/layout.js';\n/**\n * Initialize all computational message for following algorithm.\n */\n\nexport function init(inRoot) {\n  var root = inRoot;\n  root.hierNode = {\n    defaultAncestor: null,\n    ancestor: root,\n    prelim: 0,\n    modifier: 0,\n    change: 0,\n    shift: 0,\n    i: 0,\n    thread: null\n  };\n  var nodes = [root];\n  var node;\n  var children;\n\n  while (node = nodes.pop()) {\n    // jshint ignore:line\n    children = node.children;\n\n    if (node.isExpand && children.length) {\n      var n = children.length;\n\n      for (var i = n - 1; i >= 0; i--) {\n        var child = children[i];\n        child.hierNode = {\n          defaultAncestor: null,\n          ancestor: child,\n          prelim: 0,\n          modifier: 0,\n          change: 0,\n          shift: 0,\n          i: i,\n          thread: null\n        };\n        nodes.push(child);\n      }\n    }\n  }\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Computes a preliminary x coordinate for node. Before that, this function is\n * applied recursively to the children of node, as well as the function\n * apportion(). After spacing out the children by calling executeShifts(), the\n * node is placed to the midpoint of its outermost children.\n */\n\nexport function firstWalk(node, separation) {\n  var children = node.isExpand ? node.children : [];\n  var siblings = node.parentNode.children;\n  var subtreeW = node.hierNode.i ? siblings[node.hierNode.i - 1] : null;\n\n  if (children.length) {\n    executeShifts(node);\n    var midPoint = (children[0].hierNode.prelim + children[children.length - 1].hierNode.prelim) / 2;\n\n    if (subtreeW) {\n      node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\n      node.hierNode.modifier = node.hierNode.prelim - midPoint;\n    } else {\n      node.hierNode.prelim = midPoint;\n    }\n  } else if (subtreeW) {\n    node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\n  }\n\n  node.parentNode.hierNode.defaultAncestor = apportion(node, subtreeW, node.parentNode.hierNode.defaultAncestor || siblings[0], separation);\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Computes all real x-coordinates by summing up the modifiers recursively.\n */\n\nexport function secondWalk(node) {\n  var nodeX = node.hierNode.prelim + node.parentNode.hierNode.modifier;\n  node.setLayout({\n    x: nodeX\n  }, true);\n  node.hierNode.modifier += node.parentNode.hierNode.modifier;\n}\nexport function separation(cb) {\n  return arguments.length ? cb : defaultSeparation;\n}\n/**\n * Transform the common coordinate to radial coordinate.\n */\n\nexport function radialCoordinate(rad, r) {\n  rad -= Math.PI / 2;\n  return {\n    x: r * Math.cos(rad),\n    y: r * Math.sin(rad)\n  };\n}\n/**\n * Get the layout position of the whole view.\n */\n\nexport function getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n/**\n * All other shifts, applied to the smaller subtrees between w- and w+, are\n * performed by this function.\n *\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n */\n\nfunction executeShifts(node) {\n  var children = node.children;\n  var n = children.length;\n  var shift = 0;\n  var change = 0;\n\n  while (--n >= 0) {\n    var child = children[n];\n    child.hierNode.prelim += shift;\n    child.hierNode.modifier += shift;\n    change += child.hierNode.change;\n    shift += child.hierNode.shift + change;\n  }\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * The core of the algorithm. Here, a new subtree is combined with the\n * previous subtrees. Threads are used to traverse the inside and outside\n * contours of the left and right subtree up to the highest common level.\n * Whenever two nodes of the inside contours conflict, we compute the left\n * one of the greatest uncommon ancestors using the function nextAncestor()\n * and call moveSubtree() to shift the subtree and prepare the shifts of\n * smaller subtrees. Finally, we add a new thread (if necessary).\n */\n\n\nfunction apportion(subtreeV, subtreeW, ancestor, separation) {\n  if (subtreeW) {\n    var nodeOutRight = subtreeV;\n    var nodeInRight = subtreeV;\n    var nodeOutLeft = nodeInRight.parentNode.children[0];\n    var nodeInLeft = subtreeW;\n    var sumOutRight = nodeOutRight.hierNode.modifier;\n    var sumInRight = nodeInRight.hierNode.modifier;\n    var sumOutLeft = nodeOutLeft.hierNode.modifier;\n    var sumInLeft = nodeInLeft.hierNode.modifier;\n\n    while (nodeInLeft = nextRight(nodeInLeft), nodeInRight = nextLeft(nodeInRight), nodeInLeft && nodeInRight) {\n      nodeOutRight = nextRight(nodeOutRight);\n      nodeOutLeft = nextLeft(nodeOutLeft);\n      nodeOutRight.hierNode.ancestor = subtreeV;\n      var shift = nodeInLeft.hierNode.prelim + sumInLeft - nodeInRight.hierNode.prelim - sumInRight + separation(nodeInLeft, nodeInRight);\n\n      if (shift > 0) {\n        moveSubtree(nextAncestor(nodeInLeft, subtreeV, ancestor), subtreeV, shift);\n        sumInRight += shift;\n        sumOutRight += shift;\n      }\n\n      sumInLeft += nodeInLeft.hierNode.modifier;\n      sumInRight += nodeInRight.hierNode.modifier;\n      sumOutRight += nodeOutRight.hierNode.modifier;\n      sumOutLeft += nodeOutLeft.hierNode.modifier;\n    }\n\n    if (nodeInLeft && !nextRight(nodeOutRight)) {\n      nodeOutRight.hierNode.thread = nodeInLeft;\n      nodeOutRight.hierNode.modifier += sumInLeft - sumOutRight;\n    }\n\n    if (nodeInRight && !nextLeft(nodeOutLeft)) {\n      nodeOutLeft.hierNode.thread = nodeInRight;\n      nodeOutLeft.hierNode.modifier += sumInRight - sumOutLeft;\n      ancestor = subtreeV;\n    }\n  }\n\n  return ancestor;\n}\n/**\n * This function is used to traverse the right contour of a subtree.\n * It returns the rightmost child of node or the thread of node. The function\n * returns null if and only if node is on the highest depth of its subtree.\n */\n\n\nfunction nextRight(node) {\n  var children = node.children;\n  return children.length && node.isExpand ? children[children.length - 1] : node.hierNode.thread;\n}\n/**\n * This function is used to traverse the left contour of a subtree (or a subforest).\n * It returns the leftmost child of node or the thread of node. The function\n * returns null if and only if node is on the highest depth of its subtree.\n */\n\n\nfunction nextLeft(node) {\n  var children = node.children;\n  return children.length && node.isExpand ? children[0] : node.hierNode.thread;\n}\n/**\n * If nodeInLeft’s ancestor is a sibling of node, returns nodeInLeft’s ancestor.\n * Otherwise, returns the specified ancestor.\n */\n\n\nfunction nextAncestor(nodeInLeft, node, ancestor) {\n  return nodeInLeft.hierNode.ancestor.parentNode === node.parentNode ? nodeInLeft.hierNode.ancestor : ancestor;\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Shifts the current subtree rooted at wr.\n * This is done by increasing prelim(w+) and modifier(w+) by shift.\n */\n\n\nfunction moveSubtree(wl, wr, shift) {\n  var change = shift / (wr.hierNode.i - wl.hierNode.i);\n  wr.hierNode.change -= change;\n  wr.hierNode.shift += shift;\n  wr.hierNode.modifier += shift;\n  wr.hierNode.prelim += shift;\n  wl.hierNode.change += change;\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n */\n\n\nfunction defaultSeparation(node1, node2) {\n  return node1.parentNode === node2.parentNode ? 1 : 2;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}