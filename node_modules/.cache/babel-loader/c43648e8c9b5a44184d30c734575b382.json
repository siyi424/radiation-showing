{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { makeInner, getDataItemValue, queryReferringComponents, SINGLE_REFERRING } from '../../util/model.js';\nimport { createHashMap, each, isArray, isString, isObject, isTypedArray } from 'zrender/lib/core/util.js';\nimport { SOURCE_FORMAT_ORIGINAL, SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS, SERIES_LAYOUT_BY_ROW, SOURCE_FORMAT_KEYED_COLUMNS } from '../../util/types.js'; // The result of `guessOrdinal`.\n\nexport var BE_ORDINAL = {\n  Must: 1,\n  Might: 2,\n  Not: 3 // Other cases\n\n};\nvar innerGlobalModel = makeInner();\n/**\n * MUST be called before mergeOption of all series.\n */\n\nexport function resetSourceDefaulter(ecModel) {\n  // `datasetMap` is used to make default encode.\n  innerGlobalModel(ecModel).datasetMap = createHashMap();\n}\n/**\n * [The strategy of the arrengment of data dimensions for dataset]:\n * \"value way\": all axes are non-category axes. So series one by one take\n *     several (the number is coordSysDims.length) dimensions from dataset.\n *     The result of data arrengment of data dimensions like:\n *     | ser0_x | ser0_y | ser1_x | ser1_y | ser2_x | ser2_y |\n * \"category way\": at least one axis is category axis. So the the first data\n *     dimension is always mapped to the first category axis and shared by\n *     all of the series. The other data dimensions are taken by series like\n *     \"value way\" does.\n *     The result of data arrengment of data dimensions like:\n *     | ser_shared_x | ser0_y | ser1_y | ser2_y |\n *\n * @return encode Never be `null/undefined`.\n */\n\nexport function makeSeriesEncodeForAxisCoordSys(coordDimensions, seriesModel, source) {\n  var encode = {};\n  var datasetModel = querySeriesUpstreamDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.\n\n  if (!datasetModel || !coordDimensions) {\n    return encode;\n  }\n\n  var encodeItemName = [];\n  var encodeSeriesName = [];\n  var ecModel = seriesModel.ecModel;\n  var datasetMap = innerGlobalModel(ecModel).datasetMap;\n  var key = datasetModel.uid + '_' + source.seriesLayoutBy;\n  var baseCategoryDimIndex;\n  var categoryWayValueDimStart;\n  coordDimensions = coordDimensions.slice();\n  each(coordDimensions, function (coordDimInfoLoose, coordDimIdx) {\n    var coordDimInfo = isObject(coordDimInfoLoose) ? coordDimInfoLoose : coordDimensions[coordDimIdx] = {\n      name: coordDimInfoLoose\n    };\n\n    if (coordDimInfo.type === 'ordinal' && baseCategoryDimIndex == null) {\n      baseCategoryDimIndex = coordDimIdx;\n      categoryWayValueDimStart = getDataDimCountOnCoordDim(coordDimInfo);\n    }\n\n    encode[coordDimInfo.name] = [];\n  });\n  var datasetRecord = datasetMap.get(key) || datasetMap.set(key, {\n    categoryWayDim: categoryWayValueDimStart,\n    valueWayDim: 0\n  }); // TODO\n  // Auto detect first time axis and do arrangement.\n\n  each(coordDimensions, function (coordDimInfo, coordDimIdx) {\n    var coordDimName = coordDimInfo.name;\n    var count = getDataDimCountOnCoordDim(coordDimInfo); // In value way.\n\n    if (baseCategoryDimIndex == null) {\n      var start = datasetRecord.valueWayDim;\n      pushDim(encode[coordDimName], start, count);\n      pushDim(encodeSeriesName, start, count);\n      datasetRecord.valueWayDim += count; // ??? TODO give a better default series name rule?\n      // especially when encode x y specified.\n      // consider: when mutiple series share one dimension\n      // category axis, series name should better use\n      // the other dimsion name. On the other hand, use\n      // both dimensions name.\n    } // In category way, the first category axis.\n    else if (baseCategoryDimIndex === coordDimIdx) {\n      pushDim(encode[coordDimName], 0, count);\n      pushDim(encodeItemName, 0, count);\n    } // In category way, the other axis.\n    else {\n      var start = datasetRecord.categoryWayDim;\n      pushDim(encode[coordDimName], start, count);\n      pushDim(encodeSeriesName, start, count);\n      datasetRecord.categoryWayDim += count;\n    }\n  });\n\n  function pushDim(dimIdxArr, idxFrom, idxCount) {\n    for (var i = 0; i < idxCount; i++) {\n      dimIdxArr.push(idxFrom + i);\n    }\n  }\n\n  function getDataDimCountOnCoordDim(coordDimInfo) {\n    var dimsDef = coordDimInfo.dimsDef;\n    return dimsDef ? dimsDef.length : 1;\n  }\n\n  encodeItemName.length && (encode.itemName = encodeItemName);\n  encodeSeriesName.length && (encode.seriesName = encodeSeriesName);\n  return encode;\n}\n/**\n * Work for data like [{name: ..., value: ...}, ...].\n *\n * @return encode Never be `null/undefined`.\n */\n\nexport function makeSeriesEncodeForNameBased(seriesModel, source, dimCount) {\n  var encode = {};\n  var datasetModel = querySeriesUpstreamDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.\n\n  if (!datasetModel) {\n    return encode;\n  }\n\n  var sourceFormat = source.sourceFormat;\n  var dimensionsDefine = source.dimensionsDefine;\n  var potentialNameDimIndex;\n\n  if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    each(dimensionsDefine, function (dim, idx) {\n      if ((isObject(dim) ? dim.name : dim) === 'name') {\n        potentialNameDimIndex = idx;\n      }\n    });\n  }\n\n  var idxResult = function () {\n    var idxRes0 = {};\n    var idxRes1 = {};\n    var guessRecords = []; // 5 is an experience value.\n\n    for (var i = 0, len = Math.min(5, dimCount); i < len; i++) {\n      var guessResult = doGuessOrdinal(source.data, sourceFormat, source.seriesLayoutBy, dimensionsDefine, source.startIndex, i);\n      guessRecords.push(guessResult);\n      var isPureNumber = guessResult === BE_ORDINAL.Not; // [Strategy of idxRes0]: find the first BE_ORDINAL.Not as the value dim,\n      // and then find a name dim with the priority:\n      // \"BE_ORDINAL.Might|BE_ORDINAL.Must\" > \"other dim\" > \"the value dim itself\".\n\n      if (isPureNumber && idxRes0.v == null && i !== potentialNameDimIndex) {\n        idxRes0.v = i;\n      }\n\n      if (idxRes0.n == null || idxRes0.n === idxRes0.v || !isPureNumber && guessRecords[idxRes0.n] === BE_ORDINAL.Not) {\n        idxRes0.n = i;\n      }\n\n      if (fulfilled(idxRes0) && guessRecords[idxRes0.n] !== BE_ORDINAL.Not) {\n        return idxRes0;\n      } // [Strategy of idxRes1]: if idxRes0 not satisfied (that is, no BE_ORDINAL.Not),\n      // find the first BE_ORDINAL.Might as the value dim,\n      // and then find a name dim with the priority:\n      // \"other dim\" > \"the value dim itself\".\n      // That is for backward compat: number-like (e.g., `'3'`, `'55'`) can be\n      // treated as number.\n\n\n      if (!isPureNumber) {\n        if (guessResult === BE_ORDINAL.Might && idxRes1.v == null && i !== potentialNameDimIndex) {\n          idxRes1.v = i;\n        }\n\n        if (idxRes1.n == null || idxRes1.n === idxRes1.v) {\n          idxRes1.n = i;\n        }\n      }\n    }\n\n    function fulfilled(idxResult) {\n      return idxResult.v != null && idxResult.n != null;\n    }\n\n    return fulfilled(idxRes0) ? idxRes0 : fulfilled(idxRes1) ? idxRes1 : null;\n  }();\n\n  if (idxResult) {\n    encode.value = [idxResult.v]; // `potentialNameDimIndex` has highest priority.\n\n    var nameDimIndex = potentialNameDimIndex != null ? potentialNameDimIndex : idxResult.n; // By default, label use itemName in charts.\n    // So we dont set encodeLabel here.\n\n    encode.itemName = [nameDimIndex];\n    encode.seriesName = [nameDimIndex];\n  }\n\n  return encode;\n}\n/**\n * @return If return null/undefined, indicate that should not use datasetModel.\n */\n\nexport function querySeriesUpstreamDatasetModel(seriesModel) {\n  // Caution: consider the scenario:\n  // A dataset is declared and a series is not expected to use the dataset,\n  // and at the beginning `setOption({series: { noData })` (just prepare other\n  // option but no data), then `setOption({series: {data: [...]}); In this case,\n  // the user should set an empty array to avoid that dataset is used by default.\n  var thisData = seriesModel.get('data', true);\n\n  if (!thisData) {\n    return queryReferringComponents(seriesModel.ecModel, 'dataset', {\n      index: seriesModel.get('datasetIndex', true),\n      id: seriesModel.get('datasetId', true)\n    }, SINGLE_REFERRING).models[0];\n  }\n}\n/**\n * @return Always return an array event empty.\n */\n\nexport function queryDatasetUpstreamDatasetModels(datasetModel) {\n  // Only these attributes declared, we by defualt reference to `datasetIndex: 0`.\n  // Otherwise, no reference.\n  if (!datasetModel.get('transform', true) && !datasetModel.get('fromTransformResult', true)) {\n    return [];\n  }\n\n  return queryReferringComponents(datasetModel.ecModel, 'dataset', {\n    index: datasetModel.get('fromDatasetIndex', true),\n    id: datasetModel.get('fromDatasetId', true)\n  }, SINGLE_REFERRING).models;\n}\n/**\n * The rule should not be complex, otherwise user might not\n * be able to known where the data is wrong.\n * The code is ugly, but how to make it neat?\n */\n\nexport function guessOrdinal(source, dimIndex) {\n  return doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);\n} // dimIndex may be overflow source data.\n// return {BE_ORDINAL}\n\nfunction doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {\n  var result; // Experience value.\n\n  var maxLoop = 5;\n\n  if (isTypedArray(data)) {\n    return BE_ORDINAL.Not;\n  } // When sourceType is 'objectRows' or 'keyedColumns', dimensionsDefine\n  // always exists in source.\n\n\n  var dimName;\n  var dimType;\n\n  if (dimensionsDefine) {\n    var dimDefItem = dimensionsDefine[dimIndex];\n\n    if (isObject(dimDefItem)) {\n      dimName = dimDefItem.name;\n      dimType = dimDefItem.type;\n    } else if (isString(dimDefItem)) {\n      dimName = dimDefItem;\n    }\n  }\n\n  if (dimType != null) {\n    return dimType === 'ordinal' ? BE_ORDINAL.Must : BE_ORDINAL.Not;\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    var dataArrayRows = data;\n\n    if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n      var sample = dataArrayRows[dimIndex];\n\n      for (var i = 0; i < (sample || []).length && i < maxLoop; i++) {\n        if ((result = detectValue(sample[startIndex + i])) != null) {\n          return result;\n        }\n      }\n    } else {\n      for (var i = 0; i < dataArrayRows.length && i < maxLoop; i++) {\n        var row = dataArrayRows[startIndex + i];\n\n        if (row && (result = detectValue(row[dimIndex])) != null) {\n          return result;\n        }\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    var dataObjectRows = data;\n\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < dataObjectRows.length && i < maxLoop; i++) {\n      var item = dataObjectRows[i];\n\n      if (item && (result = detectValue(item[dimName])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    var dataKeyedColumns = data;\n\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    var sample = dataKeyedColumns[dimName];\n\n    if (!sample || isTypedArray(sample)) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < sample.length && i < maxLoop; i++) {\n      if ((result = detectValue(sample[i])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var dataOriginal = data;\n\n    for (var i = 0; i < dataOriginal.length && i < maxLoop; i++) {\n      var item = dataOriginal[i];\n      var val = getDataItemValue(item);\n\n      if (!isArray(val)) {\n        return BE_ORDINAL.Not;\n      }\n\n      if ((result = detectValue(val[dimIndex])) != null) {\n        return result;\n      }\n    }\n  }\n\n  function detectValue(val) {\n    var beStr = isString(val); // Consider usage convenience, '1', '2' will be treated as \"number\".\n    // `isFinit('')` get `true`.\n\n    if (val != null && isFinite(val) && val !== '') {\n      return beStr ? BE_ORDINAL.Might : BE_ORDINAL.Not;\n    } else if (beStr && val !== '-') {\n      return BE_ORDINAL.Must;\n    }\n  }\n\n  return BE_ORDINAL.Not;\n}","map":{"version":3,"names":["makeInner","getDataItemValue","queryReferringComponents","SINGLE_REFERRING","createHashMap","each","isArray","isString","isObject","isTypedArray","SOURCE_FORMAT_ORIGINAL","SOURCE_FORMAT_ARRAY_ROWS","SOURCE_FORMAT_OBJECT_ROWS","SERIES_LAYOUT_BY_ROW","SOURCE_FORMAT_KEYED_COLUMNS","BE_ORDINAL","Must","Might","Not","innerGlobalModel","resetSourceDefaulter","ecModel","datasetMap","makeSeriesEncodeForAxisCoordSys","coordDimensions","seriesModel","source","encode","datasetModel","querySeriesUpstreamDatasetModel","encodeItemName","encodeSeriesName","key","uid","seriesLayoutBy","baseCategoryDimIndex","categoryWayValueDimStart","slice","coordDimInfoLoose","coordDimIdx","coordDimInfo","name","type","getDataDimCountOnCoordDim","datasetRecord","get","set","categoryWayDim","valueWayDim","coordDimName","count","start","pushDim","dimIdxArr","idxFrom","idxCount","i","push","dimsDef","length","itemName","seriesName","makeSeriesEncodeForNameBased","dimCount","sourceFormat","dimensionsDefine","potentialNameDimIndex","dim","idx","idxResult","idxRes0","idxRes1","guessRecords","len","Math","min","guessResult","doGuessOrdinal","data","startIndex","isPureNumber","v","n","fulfilled","value","nameDimIndex","thisData","index","id","models","queryDatasetUpstreamDatasetModels","guessOrdinal","dimIndex","result","maxLoop","dimName","dimType","dimDefItem","dataArrayRows","sample","detectValue","row","dataObjectRows","item","dataKeyedColumns","dataOriginal","val","beStr","isFinite"],"sources":["/home/siyi/Projects/radi-demo/radi-showing/node_modules/echarts/lib/data/helper/sourceHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { makeInner, getDataItemValue, queryReferringComponents, SINGLE_REFERRING } from '../../util/model.js';\nimport { createHashMap, each, isArray, isString, isObject, isTypedArray } from 'zrender/lib/core/util.js';\nimport { SOURCE_FORMAT_ORIGINAL, SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS, SERIES_LAYOUT_BY_ROW, SOURCE_FORMAT_KEYED_COLUMNS } from '../../util/types.js'; // The result of `guessOrdinal`.\n\nexport var BE_ORDINAL = {\n  Must: 1,\n  Might: 2,\n  Not: 3 // Other cases\n\n};\nvar innerGlobalModel = makeInner();\n/**\n * MUST be called before mergeOption of all series.\n */\n\nexport function resetSourceDefaulter(ecModel) {\n  // `datasetMap` is used to make default encode.\n  innerGlobalModel(ecModel).datasetMap = createHashMap();\n}\n/**\n * [The strategy of the arrengment of data dimensions for dataset]:\n * \"value way\": all axes are non-category axes. So series one by one take\n *     several (the number is coordSysDims.length) dimensions from dataset.\n *     The result of data arrengment of data dimensions like:\n *     | ser0_x | ser0_y | ser1_x | ser1_y | ser2_x | ser2_y |\n * \"category way\": at least one axis is category axis. So the the first data\n *     dimension is always mapped to the first category axis and shared by\n *     all of the series. The other data dimensions are taken by series like\n *     \"value way\" does.\n *     The result of data arrengment of data dimensions like:\n *     | ser_shared_x | ser0_y | ser1_y | ser2_y |\n *\n * @return encode Never be `null/undefined`.\n */\n\nexport function makeSeriesEncodeForAxisCoordSys(coordDimensions, seriesModel, source) {\n  var encode = {};\n  var datasetModel = querySeriesUpstreamDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.\n\n  if (!datasetModel || !coordDimensions) {\n    return encode;\n  }\n\n  var encodeItemName = [];\n  var encodeSeriesName = [];\n  var ecModel = seriesModel.ecModel;\n  var datasetMap = innerGlobalModel(ecModel).datasetMap;\n  var key = datasetModel.uid + '_' + source.seriesLayoutBy;\n  var baseCategoryDimIndex;\n  var categoryWayValueDimStart;\n  coordDimensions = coordDimensions.slice();\n  each(coordDimensions, function (coordDimInfoLoose, coordDimIdx) {\n    var coordDimInfo = isObject(coordDimInfoLoose) ? coordDimInfoLoose : coordDimensions[coordDimIdx] = {\n      name: coordDimInfoLoose\n    };\n\n    if (coordDimInfo.type === 'ordinal' && baseCategoryDimIndex == null) {\n      baseCategoryDimIndex = coordDimIdx;\n      categoryWayValueDimStart = getDataDimCountOnCoordDim(coordDimInfo);\n    }\n\n    encode[coordDimInfo.name] = [];\n  });\n  var datasetRecord = datasetMap.get(key) || datasetMap.set(key, {\n    categoryWayDim: categoryWayValueDimStart,\n    valueWayDim: 0\n  }); // TODO\n  // Auto detect first time axis and do arrangement.\n\n  each(coordDimensions, function (coordDimInfo, coordDimIdx) {\n    var coordDimName = coordDimInfo.name;\n    var count = getDataDimCountOnCoordDim(coordDimInfo); // In value way.\n\n    if (baseCategoryDimIndex == null) {\n      var start = datasetRecord.valueWayDim;\n      pushDim(encode[coordDimName], start, count);\n      pushDim(encodeSeriesName, start, count);\n      datasetRecord.valueWayDim += count; // ??? TODO give a better default series name rule?\n      // especially when encode x y specified.\n      // consider: when mutiple series share one dimension\n      // category axis, series name should better use\n      // the other dimsion name. On the other hand, use\n      // both dimensions name.\n    } // In category way, the first category axis.\n    else if (baseCategoryDimIndex === coordDimIdx) {\n        pushDim(encode[coordDimName], 0, count);\n        pushDim(encodeItemName, 0, count);\n      } // In category way, the other axis.\n      else {\n          var start = datasetRecord.categoryWayDim;\n          pushDim(encode[coordDimName], start, count);\n          pushDim(encodeSeriesName, start, count);\n          datasetRecord.categoryWayDim += count;\n        }\n  });\n\n  function pushDim(dimIdxArr, idxFrom, idxCount) {\n    for (var i = 0; i < idxCount; i++) {\n      dimIdxArr.push(idxFrom + i);\n    }\n  }\n\n  function getDataDimCountOnCoordDim(coordDimInfo) {\n    var dimsDef = coordDimInfo.dimsDef;\n    return dimsDef ? dimsDef.length : 1;\n  }\n\n  encodeItemName.length && (encode.itemName = encodeItemName);\n  encodeSeriesName.length && (encode.seriesName = encodeSeriesName);\n  return encode;\n}\n/**\n * Work for data like [{name: ..., value: ...}, ...].\n *\n * @return encode Never be `null/undefined`.\n */\n\nexport function makeSeriesEncodeForNameBased(seriesModel, source, dimCount) {\n  var encode = {};\n  var datasetModel = querySeriesUpstreamDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.\n\n  if (!datasetModel) {\n    return encode;\n  }\n\n  var sourceFormat = source.sourceFormat;\n  var dimensionsDefine = source.dimensionsDefine;\n  var potentialNameDimIndex;\n\n  if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    each(dimensionsDefine, function (dim, idx) {\n      if ((isObject(dim) ? dim.name : dim) === 'name') {\n        potentialNameDimIndex = idx;\n      }\n    });\n  }\n\n  var idxResult = function () {\n    var idxRes0 = {};\n    var idxRes1 = {};\n    var guessRecords = []; // 5 is an experience value.\n\n    for (var i = 0, len = Math.min(5, dimCount); i < len; i++) {\n      var guessResult = doGuessOrdinal(source.data, sourceFormat, source.seriesLayoutBy, dimensionsDefine, source.startIndex, i);\n      guessRecords.push(guessResult);\n      var isPureNumber = guessResult === BE_ORDINAL.Not; // [Strategy of idxRes0]: find the first BE_ORDINAL.Not as the value dim,\n      // and then find a name dim with the priority:\n      // \"BE_ORDINAL.Might|BE_ORDINAL.Must\" > \"other dim\" > \"the value dim itself\".\n\n      if (isPureNumber && idxRes0.v == null && i !== potentialNameDimIndex) {\n        idxRes0.v = i;\n      }\n\n      if (idxRes0.n == null || idxRes0.n === idxRes0.v || !isPureNumber && guessRecords[idxRes0.n] === BE_ORDINAL.Not) {\n        idxRes0.n = i;\n      }\n\n      if (fulfilled(idxRes0) && guessRecords[idxRes0.n] !== BE_ORDINAL.Not) {\n        return idxRes0;\n      } // [Strategy of idxRes1]: if idxRes0 not satisfied (that is, no BE_ORDINAL.Not),\n      // find the first BE_ORDINAL.Might as the value dim,\n      // and then find a name dim with the priority:\n      // \"other dim\" > \"the value dim itself\".\n      // That is for backward compat: number-like (e.g., `'3'`, `'55'`) can be\n      // treated as number.\n\n\n      if (!isPureNumber) {\n        if (guessResult === BE_ORDINAL.Might && idxRes1.v == null && i !== potentialNameDimIndex) {\n          idxRes1.v = i;\n        }\n\n        if (idxRes1.n == null || idxRes1.n === idxRes1.v) {\n          idxRes1.n = i;\n        }\n      }\n    }\n\n    function fulfilled(idxResult) {\n      return idxResult.v != null && idxResult.n != null;\n    }\n\n    return fulfilled(idxRes0) ? idxRes0 : fulfilled(idxRes1) ? idxRes1 : null;\n  }();\n\n  if (idxResult) {\n    encode.value = [idxResult.v]; // `potentialNameDimIndex` has highest priority.\n\n    var nameDimIndex = potentialNameDimIndex != null ? potentialNameDimIndex : idxResult.n; // By default, label use itemName in charts.\n    // So we dont set encodeLabel here.\n\n    encode.itemName = [nameDimIndex];\n    encode.seriesName = [nameDimIndex];\n  }\n\n  return encode;\n}\n/**\n * @return If return null/undefined, indicate that should not use datasetModel.\n */\n\nexport function querySeriesUpstreamDatasetModel(seriesModel) {\n  // Caution: consider the scenario:\n  // A dataset is declared and a series is not expected to use the dataset,\n  // and at the beginning `setOption({series: { noData })` (just prepare other\n  // option but no data), then `setOption({series: {data: [...]}); In this case,\n  // the user should set an empty array to avoid that dataset is used by default.\n  var thisData = seriesModel.get('data', true);\n\n  if (!thisData) {\n    return queryReferringComponents(seriesModel.ecModel, 'dataset', {\n      index: seriesModel.get('datasetIndex', true),\n      id: seriesModel.get('datasetId', true)\n    }, SINGLE_REFERRING).models[0];\n  }\n}\n/**\n * @return Always return an array event empty.\n */\n\nexport function queryDatasetUpstreamDatasetModels(datasetModel) {\n  // Only these attributes declared, we by defualt reference to `datasetIndex: 0`.\n  // Otherwise, no reference.\n  if (!datasetModel.get('transform', true) && !datasetModel.get('fromTransformResult', true)) {\n    return [];\n  }\n\n  return queryReferringComponents(datasetModel.ecModel, 'dataset', {\n    index: datasetModel.get('fromDatasetIndex', true),\n    id: datasetModel.get('fromDatasetId', true)\n  }, SINGLE_REFERRING).models;\n}\n/**\n * The rule should not be complex, otherwise user might not\n * be able to known where the data is wrong.\n * The code is ugly, but how to make it neat?\n */\n\nexport function guessOrdinal(source, dimIndex) {\n  return doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);\n} // dimIndex may be overflow source data.\n// return {BE_ORDINAL}\n\nfunction doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {\n  var result; // Experience value.\n\n  var maxLoop = 5;\n\n  if (isTypedArray(data)) {\n    return BE_ORDINAL.Not;\n  } // When sourceType is 'objectRows' or 'keyedColumns', dimensionsDefine\n  // always exists in source.\n\n\n  var dimName;\n  var dimType;\n\n  if (dimensionsDefine) {\n    var dimDefItem = dimensionsDefine[dimIndex];\n\n    if (isObject(dimDefItem)) {\n      dimName = dimDefItem.name;\n      dimType = dimDefItem.type;\n    } else if (isString(dimDefItem)) {\n      dimName = dimDefItem;\n    }\n  }\n\n  if (dimType != null) {\n    return dimType === 'ordinal' ? BE_ORDINAL.Must : BE_ORDINAL.Not;\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    var dataArrayRows = data;\n\n    if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n      var sample = dataArrayRows[dimIndex];\n\n      for (var i = 0; i < (sample || []).length && i < maxLoop; i++) {\n        if ((result = detectValue(sample[startIndex + i])) != null) {\n          return result;\n        }\n      }\n    } else {\n      for (var i = 0; i < dataArrayRows.length && i < maxLoop; i++) {\n        var row = dataArrayRows[startIndex + i];\n\n        if (row && (result = detectValue(row[dimIndex])) != null) {\n          return result;\n        }\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    var dataObjectRows = data;\n\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < dataObjectRows.length && i < maxLoop; i++) {\n      var item = dataObjectRows[i];\n\n      if (item && (result = detectValue(item[dimName])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    var dataKeyedColumns = data;\n\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    var sample = dataKeyedColumns[dimName];\n\n    if (!sample || isTypedArray(sample)) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < sample.length && i < maxLoop; i++) {\n      if ((result = detectValue(sample[i])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var dataOriginal = data;\n\n    for (var i = 0; i < dataOriginal.length && i < maxLoop; i++) {\n      var item = dataOriginal[i];\n      var val = getDataItemValue(item);\n\n      if (!isArray(val)) {\n        return BE_ORDINAL.Not;\n      }\n\n      if ((result = detectValue(val[dimIndex])) != null) {\n        return result;\n      }\n    }\n  }\n\n  function detectValue(val) {\n    var beStr = isString(val); // Consider usage convenience, '1', '2' will be treated as \"number\".\n    // `isFinit('')` get `true`.\n\n    if (val != null && isFinite(val) && val !== '') {\n      return beStr ? BE_ORDINAL.Might : BE_ORDINAL.Not;\n    } else if (beStr && val !== '-') {\n      return BE_ORDINAL.Must;\n    }\n  }\n\n  return BE_ORDINAL.Not;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}